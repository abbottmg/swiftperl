// !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
// This file is built by update-headers from data in embed.fnc.
// Any changes made here will be lost!
//
// Edit update-headers and run it to effect changes.

#ifdef av_clear
SWIFT_NAME(PerlInterpreter.av_clear(self:_:))
PERL_STATIC_INLINE void CPerl_av_clear(pTHX_ AV *_Nonnull av) {
	av_clear(av);
}
#endif

#ifdef av_delete
SWIFT_NAME(PerlInterpreter.av_delete(self:_:_:_:))
PERL_STATIC_INLINE SV *_Nullable CPerl_av_delete(pTHX_ AV *_Nonnull av, SSize_t key, I32 flags) {
	return av_delete(av, key, flags);
}
#endif

#ifdef av_exists
SWIFT_NAME(PerlInterpreter.av_exists(self:_:_:))
PERL_STATIC_INLINE bool CPerl_av_exists(pTHX_ AV *_Nonnull av, SSize_t key) {
	return av_exists(av, key);
}
#endif

#ifdef av_extend
SWIFT_NAME(PerlInterpreter.av_extend(self:_:_:))
PERL_STATIC_INLINE void CPerl_av_extend(pTHX_ AV *_Nonnull av, SSize_t key) {
	av_extend(av, key);
}
#endif

#ifdef av_fetch
SWIFT_NAME(PerlInterpreter.av_fetch(self:_:_:_:))
PERL_STATIC_INLINE SV *_Nullable *_Nullable CPerl_av_fetch(pTHX_ AV *_Nonnull av, SSize_t key, bool lval) {
	return av_fetch(av, key, lval);
}
#endif

#ifdef av_fill
SWIFT_NAME(PerlInterpreter.av_fill(self:_:_:))
PERL_STATIC_INLINE void CPerl_av_fill(pTHX_ AV *_Nonnull av, SSize_t fill) {
	av_fill(av, fill);
}
#endif

#ifdef av_len
SWIFT_NAME(PerlInterpreter.av_len(self:_:))
PERL_STATIC_INLINE SSize_t CPerl_av_len(pTHX_ AV *_Nonnull av) {
	return av_len(av);
}
#endif

#ifdef av_make
SWIFT_NAME(PerlInterpreter.av_make(self:_:_:))
PERL_STATIC_INLINE AV *_Nonnull CPerl_av_make(pTHX_ SSize_t size, SV *_Nonnull *_Nonnull strp) {
	return av_make(size, strp);
}
#endif

#ifdef av_pop
SWIFT_NAME(PerlInterpreter.av_pop(self:_:))
PERL_STATIC_INLINE SV *_Nonnull CPerl_av_pop(pTHX_ AV *_Nonnull av) {
	return av_pop(av);
}
#endif

#ifdef av_push
SWIFT_NAME(PerlInterpreter.av_push(self:_:_:))
PERL_STATIC_INLINE void CPerl_av_push(pTHX_ AV *_Nonnull av, SV *_Nonnull val) {
	av_push(av, val);
}
#endif

#ifdef av_shift
SWIFT_NAME(PerlInterpreter.av_shift(self:_:))
PERL_STATIC_INLINE SV *_Nonnull CPerl_av_shift(pTHX_ AV *_Nonnull av) {
	return av_shift(av);
}
#endif

#ifdef av_store
SWIFT_NAME(PerlInterpreter.av_store(self:_:_:_:))
PERL_STATIC_INLINE SV *_Nullable *_Nullable CPerl_av_store(pTHX_ AV *_Nonnull av, SSize_t key, SV *_Nullable val) {
	return av_store(av, key, val);
}
#endif

#ifdef av_tindex
SWIFT_NAME(PerlInterpreter.av_tindex(self:_:))
PERL_STATIC_INLINE SSize_t CPerl_av_tindex(pTHX_ AV *_Nonnull av) {
	return av_tindex(av);
}
#endif

#ifdef av_undef
SWIFT_NAME(PerlInterpreter.av_undef(self:_:))
PERL_STATIC_INLINE void CPerl_av_undef(pTHX_ AV *_Nonnull av) {
	av_undef(av);
}
#endif

#ifdef av_unshift
SWIFT_NAME(PerlInterpreter.av_unshift(self:_:_:))
PERL_STATIC_INLINE void CPerl_av_unshift(pTHX_ AV *_Nonnull av, SSize_t num) {
	av_unshift(av, num);
}
#endif

#ifdef block_start
SWIFT_NAME(PerlInterpreter.block_start(self:_:))
PERL_STATIC_INLINE int CPerl_block_start(pTHX_ int full) {
	return block_start(full);
}
#endif

#ifdef bytes_cmp_utf8
SWIFT_NAME(PerlInterpreter.bytes_cmp_utf8(self:_:_:_:_:))
PERL_STATIC_INLINE int CPerl_bytes_cmp_utf8(pTHX_ const U8 *_Nonnull b, STRLEN blen, const U8 *_Nonnull u, STRLEN ulen) {
	return bytes_cmp_utf8(b, blen, u, ulen);
}
#endif

#ifdef call_argv
SWIFT_NAME(PerlInterpreter.call_argv(self:_:_:_:))
PERL_STATIC_INLINE I32 CPerl_call_argv(pTHX_ const char* _Nonnull sub_name, I32 flags, char*_Nonnull * _Nonnull argv) {
	return call_argv(sub_name, flags, argv);
}
#endif

#ifdef call_method
SWIFT_NAME(PerlInterpreter.call_method(self:_:_:))
PERL_STATIC_INLINE I32 CPerl_call_method(pTHX_ const char* _Nonnull methname, I32 flags) {
	return call_method(methname, flags);
}
#endif

#ifdef call_pv
SWIFT_NAME(PerlInterpreter.call_pv(self:_:_:))
PERL_STATIC_INLINE I32 CPerl_call_pv(pTHX_ const char* _Nonnull sub_name, I32 flags) {
	return call_pv(sub_name, flags);
}
#endif

#ifdef call_sv
SWIFT_NAME(PerlInterpreter.call_sv(self:_:_:))
PERL_STATIC_INLINE I32 CPerl_call_sv(pTHX_ SV* _Nonnull sv, VOL I32 flags) {
	return call_sv(sv, flags);
}
#endif

#ifdef croak_no_modify
SWIFT_NAME(croak_no_modify())
PERL_STATIC_INLINE void CPerl_croak_no_modify(void) {
	croak_no_modify();
}
#endif

#ifdef croak_xs_usage
SWIFT_NAME(PerlInterpreter.croak_xs_usage(self:_:_:))
PERL_STATIC_INLINE void CPerl_croak_xs_usage(pTHX_ const CV *_Nonnull const cv, const char *_Nonnull const params) {
	croak_xs_usage(cv, params);
}
#endif

#ifdef cv_name
SWIFT_NAME(PerlInterpreter.cv_name(self:_:_:_:))
PERL_STATIC_INLINE SV  *_Nonnull CPerl_cv_name(pTHX_ CV *_Nonnull cv, SV *_Nullable sv, U32 flags) {
	return cv_name(cv, sv, flags);
}
#endif

#ifdef cv_undef
SWIFT_NAME(PerlInterpreter.cv_undef(self:_:))
PERL_STATIC_INLINE void CPerl_cv_undef(pTHX_ CV* _Nonnull cv) {
	cv_undef(cv);
}
#endif

#ifdef eval_sv
SWIFT_NAME(PerlInterpreter.eval_sv(self:_:_:))
PERL_STATIC_INLINE I32 CPerl_eval_sv(pTHX_ SV* _Nonnull sv, I32 flags) {
	return eval_sv(sv, flags);
}
#endif

#ifdef fbm_compile
SWIFT_NAME(PerlInterpreter.fbm_compile(self:_:_:))
PERL_STATIC_INLINE void CPerl_fbm_compile(pTHX_ SV* _Nonnull sv, U32 flags) {
	fbm_compile(sv, flags);
}
#endif

#ifdef foldEQ_utf8
SWIFT_NAME(PerlInterpreter.foldEQ_utf8(self:_:_:_:_:_:_:_:_:))
PERL_STATIC_INLINE I32 CPerl_foldEQ_utf8(pTHX_ const char *_Nonnull s1, char *_Nullable *_Nullable pe1, UV l1, bool u1, const char *_Nonnull s2, char *_Nullable *_Nullable pe2, UV l2, bool u2) {
	return foldEQ_utf8(s1, pe1, l1, u1, s2, pe2, l2, u2);
}
#endif

#ifdef get_av
SWIFT_NAME(PerlInterpreter.get_av(self:_:_:))
PERL_STATIC_INLINE AV *_Nullable CPerl_get_av(pTHX_ const char *_Nonnull name, I32 flags) {
	return get_av(name, flags);
}
#endif

#ifdef get_cv
SWIFT_NAME(PerlInterpreter.get_cv(self:_:_:))
PERL_STATIC_INLINE CV *_Nullable CPerl_get_cv(pTHX_ const char* _Nonnull name, I32 flags) {
	return get_cv(name, flags);
}
#endif

#ifdef get_hv
SWIFT_NAME(PerlInterpreter.get_hv(self:_:_:))
PERL_STATIC_INLINE HV *_Nullable CPerl_get_hv(pTHX_ const char *_Nonnull name, I32 flags) {
	return get_hv(name, flags);
}
#endif

#ifdef get_sv
SWIFT_NAME(PerlInterpreter.get_sv(self:_:_:))
PERL_STATIC_INLINE SV *_Nullable CPerl_get_sv(pTHX_ const char *_Nonnull name, I32 flags) {
	return get_sv(name, flags);
}
#endif

#ifdef getcwd_sv
SWIFT_NAME(PerlInterpreter.getcwd_sv(self:_:))
PERL_STATIC_INLINE int CPerl_getcwd_sv(pTHX_ SV* _Nonnull sv) {
	return getcwd_sv(sv);
}
#endif

#ifdef grok_bin
SWIFT_NAME(PerlInterpreter.grok_bin(self:_:_:_:_:))
PERL_STATIC_INLINE UV CPerl_grok_bin(pTHX_ const char* _Nonnull start, STRLEN* _Nonnull len_p, I32* _Nonnull flags, NV *_Nullable result) {
	return grok_bin(start, len_p, flags, result);
}
#endif

#ifdef grok_hex
SWIFT_NAME(PerlInterpreter.grok_hex(self:_:_:_:_:))
PERL_STATIC_INLINE UV CPerl_grok_hex(pTHX_ const char* _Nonnull start, STRLEN* _Nonnull len_p, I32* _Nonnull flags, NV *_Nullable result) {
	return grok_hex(start, len_p, flags, result);
}
#endif

#ifdef grok_infnan
SWIFT_NAME(PerlInterpreter.grok_infnan(self:_:_:))
PERL_STATIC_INLINE int CPerl_grok_infnan(pTHX_ const char*_Nonnull * _Nonnull sp, const char *_Nonnull send) {
	return grok_infnan(sp, send);
}
#endif

#ifdef grok_number
SWIFT_NAME(PerlInterpreter.grok_number(self:_:_:_:))
PERL_STATIC_INLINE int CPerl_grok_number(pTHX_ const char *_Nonnull pv, STRLEN len, UV *_Nullable valuep) {
	return grok_number(pv, len, valuep);
}
#endif

#ifdef grok_number_flags
SWIFT_NAME(PerlInterpreter.grok_number_flags(self:_:_:_:_:))
PERL_STATIC_INLINE int CPerl_grok_number_flags(pTHX_ const char *_Nonnull pv, STRLEN len, UV *_Nullable valuep, U32 flags) {
	return grok_number_flags(pv, len, valuep, flags);
}
#endif

#ifdef grok_numeric_radix
SWIFT_NAME(PerlInterpreter.grok_numeric_radix(self:_:_:))
PERL_STATIC_INLINE bool CPerl_grok_numeric_radix(pTHX_ const char *_Nonnull *_Nonnull sp, const char *_Nonnull send) {
	return grok_numeric_radix(sp, send);
}
#endif

#ifdef grok_oct
SWIFT_NAME(PerlInterpreter.grok_oct(self:_:_:_:_:))
PERL_STATIC_INLINE UV CPerl_grok_oct(pTHX_ const char* _Nonnull start, STRLEN* _Nonnull len_p, I32* _Nonnull flags, NV *_Nullable result) {
	return grok_oct(start, len_p, flags, result);
}
#endif

#ifdef gv_init
SWIFT_NAME(PerlInterpreter.gv_init(self:_:_:_:_:_:))
PERL_STATIC_INLINE void CPerl_gv_init(pTHX_ GV* _Nonnull gv, HV* _Nullable stash, const char* _Nonnull name, STRLEN len, bool multi) {
	gv_init(gv, stash, name, len, multi);
}
#endif

#ifdef hv_clear
SWIFT_NAME(PerlInterpreter.hv_clear(self:_:))
PERL_STATIC_INLINE void CPerl_hv_clear(pTHX_ HV *_Nullable hv) {
	hv_clear(hv);
}
#endif

#ifdef hv_clear_placeholders
SWIFT_NAME(PerlInterpreter.hv_clear_placeholders(self:_:))
PERL_STATIC_INLINE void CPerl_hv_clear_placeholders(pTHX_ HV *_Nonnull hv) {
	hv_clear_placeholders(hv);
}
#endif

#ifdef hv_delete
SWIFT_NAME(PerlInterpreter.hv_delete(self:_:_:_:_:))
PERL_STATIC_INLINE SV *_Nullable CPerl_hv_delete(pTHX_ HV *_Nullable hv, const char *_Nonnull key, I32 klen, I32 flags) {
	return hv_delete(hv, key, klen, flags);
}
#endif

#ifdef hv_delete_ent
SWIFT_NAME(PerlInterpreter.hv_delete_ent(self:_:_:_:_:))
PERL_STATIC_INLINE SV *_Nullable CPerl_hv_delete_ent(pTHX_ HV *_Nullable hv, SV *_Nonnull keysv, I32 flags, U32 hash) {
	return hv_delete_ent(hv, keysv, flags, hash);
}
#endif

#ifdef hv_exists
SWIFT_NAME(PerlInterpreter.hv_exists(self:_:_:_:))
PERL_STATIC_INLINE bool CPerl_hv_exists(pTHX_ HV *_Nullable hv, const char *_Nonnull key, I32 klen) {
	return hv_exists(hv, key, klen);
}
#endif

#ifdef hv_exists_ent
SWIFT_NAME(PerlInterpreter.hv_exists_ent(self:_:_:_:))
PERL_STATIC_INLINE bool CPerl_hv_exists_ent(pTHX_ HV *_Nullable hv, SV *_Nonnull keysv, U32 hash) {
	return hv_exists_ent(hv, keysv, hash);
}
#endif

#ifdef hv_fetch
SWIFT_NAME(PerlInterpreter.hv_fetch(self:_:_:_:_:))
PERL_STATIC_INLINE SV *_Nullable *_Nullable CPerl_hv_fetch(pTHX_ HV *_Nullable hv, const char *_Nonnull key, I32 klen, bool lval) {
	return hv_fetch(hv, key, klen, lval);
}
#endif

#ifdef hv_fetch_ent
SWIFT_NAME(PerlInterpreter.hv_fetch_ent(self:_:_:_:_:))
PERL_STATIC_INLINE HE *_Nullable CPerl_hv_fetch_ent(pTHX_ HV *_Nullable hv, SV *_Nonnull keysv, bool lval, U32 hash) {
	return hv_fetch_ent(hv, keysv, lval, hash);
}
#endif

#ifdef hv_iterinit
SWIFT_NAME(PerlInterpreter.hv_iterinit(self:_:))
PERL_STATIC_INLINE I32 CPerl_hv_iterinit(pTHX_ HV *_Nonnull hv) {
	return hv_iterinit(hv);
}
#endif

#ifdef hv_iternext
SWIFT_NAME(PerlInterpreter.hv_iternext(self:_:))
PERL_STATIC_INLINE HE *_Nullable CPerl_hv_iternext(pTHX_ HV *_Nonnull hv) {
	return hv_iternext(hv);
}
#endif

#ifdef hv_magic
SWIFT_NAME(PerlInterpreter.hv_magic(self:_:_:_:))
PERL_STATIC_INLINE void CPerl_hv_magic(pTHX_ HV *_Nonnull hv, GV *_Nullable gv, int how) {
	hv_magic(hv, gv, how);
}
#endif

#ifdef hv_scalar
SWIFT_NAME(PerlInterpreter.hv_scalar(self:_:))
PERL_STATIC_INLINE SV *_Nonnull CPerl_hv_scalar(pTHX_ HV *_Nonnull hv) {
	return hv_scalar(hv);
}
#endif

#ifdef hv_store
SWIFT_NAME(PerlInterpreter.hv_store(self:_:_:_:_:_:))
PERL_STATIC_INLINE SV *_Nullable *_Nullable CPerl_hv_store(pTHX_ HV *_Nullable hv, const char *_Nullable key, I32 klen, SV *_Nullable val, U32 hash) {
	return hv_store(hv, key, klen, val, hash);
}
#endif

#ifdef hv_store_ent
SWIFT_NAME(PerlInterpreter.hv_store_ent(self:_:_:_:_:))
PERL_STATIC_INLINE HE *_Nullable CPerl_hv_store_ent(pTHX_ HV *_Nullable hv, SV *_Nullable key, SV *_Nullable val, U32 hash) {
	return hv_store_ent(hv, key, val, hash);
}
#endif

#ifdef hv_undef
SWIFT_NAME(PerlInterpreter.hv_undef(self:_:))
PERL_STATIC_INLINE void CPerl_hv_undef(pTHX_ HV *_Nullable hv) {
	hv_undef(hv);
}
#endif

#ifdef intro_my
SWIFT_NAME(PerlInterpreter.intro_my(self:))
PERL_STATIC_INLINE U32 CPerl_intro_my(pTHX) {
	return intro_my();
}
#endif

#ifdef is_ascii_string
SWIFT_NAME(PerlInterpreter.is_ascii_string(self:_:_:))
PERL_STATIC_INLINE bool CPerl_is_ascii_string(pTHX_ const U8 *_Nonnull s, STRLEN len) {
	return is_ascii_string(s, len);
}
#endif

#ifdef is_invariant_string
SWIFT_NAME(is_invariant_string(_:_:))
PERL_STATIC_INLINE bool CPerl_is_invariant_string(const U8 *_Nonnull s, STRLEN len) {
	return is_invariant_string(s, len);
}
#endif

#ifdef is_utf8_char_buf
SWIFT_NAME(is_utf8_char_buf(_:_:))
PERL_STATIC_INLINE STRLEN CPerl_is_utf8_char_buf(const U8 *_Nonnull buf, const U8 *_Nonnull buf_end) {
	return is_utf8_char_buf(buf, buf_end);
}
#endif

#ifdef is_utf8_string
SWIFT_NAME(PerlInterpreter.is_utf8_string(self:_:_:))
PERL_STATIC_INLINE bool CPerl_is_utf8_string(pTHX_ const U8 *_Nonnull s, STRLEN len) {
	return is_utf8_string(s, len);
}
#endif

#ifdef is_utf8_string_loc
SWIFT_NAME(PerlInterpreter.is_utf8_string_loc(self:_:_:_:))
PERL_STATIC_INLINE bool CPerl_is_utf8_string_loc(pTHX_ const U8 *_Nonnull s, STRLEN len, const U8 *_Nullable *_Nullable ep) {
	return is_utf8_string_loc(s, len, ep);
}
#endif

#ifdef is_utf8_string_loclen
SWIFT_NAME(PerlInterpreter.is_utf8_string_loclen(self:_:_:_:_:))
PERL_STATIC_INLINE bool CPerl_is_utf8_string_loclen(pTHX_ const U8 *_Nonnull s, STRLEN len, const U8 *_Nullable *_Nullable ep, STRLEN *_Nullable el) {
	return is_utf8_string_loclen(s, len, ep, el);
}
#endif

#ifdef isinfnan
SWIFT_NAME(isinfnan(_:))
PERL_STATIC_INLINE bool CPerl_isinfnan(NV nv) {
	return isinfnan(nv);
}
#endif

#ifdef looks_like_number
SWIFT_NAME(PerlInterpreter.looks_like_number(self:_:))
PERL_STATIC_INLINE I32 CPerl_looks_like_number(pTHX_ SV *_Nonnull const sv) {
	return looks_like_number(sv);
}
#endif

#ifdef mg_clear
SWIFT_NAME(PerlInterpreter.mg_clear(self:_:))
PERL_STATIC_INLINE int CPerl_mg_clear(pTHX_ SV* _Nonnull sv) {
	return mg_clear(sv);
}
#endif

#ifdef mg_copy
SWIFT_NAME(PerlInterpreter.mg_copy(self:_:_:_:_:))
PERL_STATIC_INLINE int CPerl_mg_copy(pTHX_ SV *_Nonnull sv, SV *_Nonnull nsv, const char *_Nullable key, I32 klen) {
	return mg_copy(sv, nsv, key, klen);
}
#endif

#ifdef mg_free
SWIFT_NAME(PerlInterpreter.mg_free(self:_:))
PERL_STATIC_INLINE int CPerl_mg_free(pTHX_ SV* _Nonnull sv) {
	return mg_free(sv);
}
#endif

#ifdef mg_free_type
SWIFT_NAME(PerlInterpreter.mg_free_type(self:_:_:))
PERL_STATIC_INLINE void CPerl_mg_free_type(pTHX_ SV* _Nonnull sv, int how) {
	mg_free_type(sv, how);
}
#endif

#ifdef mg_get
SWIFT_NAME(PerlInterpreter.mg_get(self:_:))
PERL_STATIC_INLINE int CPerl_mg_get(pTHX_ SV* _Nonnull sv) {
	return mg_get(sv);
}
#endif

#ifdef mg_magical
SWIFT_NAME(PerlInterpreter.mg_magical(self:_:))
PERL_STATIC_INLINE void CPerl_mg_magical(pTHX_ SV* _Nonnull sv) {
	mg_magical(sv);
}
#endif

#ifdef mg_set
SWIFT_NAME(PerlInterpreter.mg_set(self:_:))
PERL_STATIC_INLINE int CPerl_mg_set(pTHX_ SV* _Nonnull sv) {
	return mg_set(sv);
}
#endif

#ifdef mro_method_changed_in
SWIFT_NAME(PerlInterpreter.mro_method_changed_in(self:_:))
PERL_STATIC_INLINE void CPerl_mro_method_changed_in(pTHX_ HV* _Nonnull stash) {
	mro_method_changed_in(stash);
}
#endif

#ifdef newAV
SWIFT_NAME(PerlInterpreter.newAV(self:))
PERL_STATIC_INLINE AV *_Nonnull CPerl_newAV(pTHX) {
	return newAV();
}
#endif

#ifdef newHV
SWIFT_NAME(PerlInterpreter.newHV(self:))
PERL_STATIC_INLINE HV *_Nonnull CPerl_newHV(pTHX) {
	return newHV();
}
#endif

#ifdef newRV_noinc
SWIFT_NAME(PerlInterpreter.newRV_noinc(self:_:))
PERL_STATIC_INLINE SV *_Nonnull CPerl_newRV_noinc(pTHX_ SV *_Nonnull const tmpRef) {
	return newRV_noinc(tmpRef);
}
#endif

#ifdef newSV
SWIFT_NAME(PerlInterpreter.newSV(self:_:))
PERL_STATIC_INLINE SV *_Nonnull CPerl_newSV(pTHX_ const STRLEN len) {
	return newSV(len);
}
#endif

#ifdef newSV_type
SWIFT_NAME(PerlInterpreter.newSV_type(self:_:))
PERL_STATIC_INLINE SV *_Nonnull CPerl_newSV_type(pTHX_ const svtype type) {
	return newSV_type(type);
}
#endif

#ifdef newSVhek
SWIFT_NAME(PerlInterpreter.newSVhek(self:_:))
PERL_STATIC_INLINE SV *_Nonnull CPerl_newSVhek(pTHX_ const HEK *_Nullable const hek) {
	return newSVhek(hek);
}
#endif

#ifdef newSViv
SWIFT_NAME(PerlInterpreter.newSViv(self:_:))
PERL_STATIC_INLINE SV *_Nonnull CPerl_newSViv(pTHX_ const IV i) {
	return newSViv(i);
}
#endif

#ifdef newSVnv
SWIFT_NAME(PerlInterpreter.newSVnv(self:_:))
PERL_STATIC_INLINE SV *_Nonnull CPerl_newSVnv(pTHX_ const NV n) {
	return newSVnv(n);
}
#endif

#ifdef newSVpvn
SWIFT_NAME(PerlInterpreter.newSVpvn(self:_:_:))
PERL_STATIC_INLINE SV *_Nonnull CPerl_newSVpvn(pTHX_ const char *_Nullable const s, const STRLEN len) {
	return newSVpvn(s, len);
}
#endif

#ifdef newSVpvn_flags
SWIFT_NAME(PerlInterpreter.newSVpvn_flags(self:_:_:_:))
PERL_STATIC_INLINE SV *_Nonnull CPerl_newSVpvn_flags(pTHX_ const char *_Nullable const s, const STRLEN len, const U32 flags) {
	return newSVpvn_flags(s, len, flags);
}
#endif

#ifdef newSVpvn_share
SWIFT_NAME(PerlInterpreter.newSVpvn_share(self:_:_:_:))
PERL_STATIC_INLINE SV *_Nonnull CPerl_newSVpvn_share(pTHX_ const char* _Nullable s, I32 len, U32 hash) {
	return newSVpvn_share(s, len, hash);
}
#endif

#ifdef newSVrv
SWIFT_NAME(PerlInterpreter.newSVrv(self:_:_:))
PERL_STATIC_INLINE SV *_Nonnull CPerl_newSVrv(pTHX_ SV *_Nonnull const rv, const char *_Nullable const classname) {
	return newSVrv(rv, classname);
}
#endif

#ifdef newSVsv
SWIFT_NAME(PerlInterpreter.newSVsv(self:_:))
PERL_STATIC_INLINE SV *_Nullable CPerl_newSVsv(pTHX_ SV *_Nullable const old) {
	return newSVsv(old);
}
#endif

#ifdef newSVuv
SWIFT_NAME(PerlInterpreter.newSVuv(self:_:))
PERL_STATIC_INLINE SV *_Nonnull CPerl_newSVuv(pTHX_ const UV u) {
	return newSVuv(u);
}
#endif

#ifdef newXS
SWIFT_NAME(PerlInterpreter.newXS(self:_:_:_:))
PERL_STATIC_INLINE CV *_Nonnull CPerl_newXS(pTHX_ const char *_Nullable name, XSUBADDR_t _Nonnull subaddr, const char *_Nonnull filename) {
	return newXS(name, subaddr, filename);
}
#endif

#ifdef newXS_flags
SWIFT_NAME(PerlInterpreter.newXS_flags(self:_:_:_:_:_:))
PERL_STATIC_INLINE CV  *_Nonnull CPerl_newXS_flags(pTHX_ const char *_Nullable name, XSUBADDR_t _Nonnull subaddr, const char *_Nonnull const filename, const char *_Nullable const proto, U32 flags) {
	return newXS_flags(name, subaddr, filename, proto, flags);
}
#endif

#ifdef nothreadhook
SWIFT_NAME(PerlInterpreter.nothreadhook(self:))
PERL_STATIC_INLINE int CPerl_nothreadhook(pTHX) {
	return nothreadhook();
}
#endif

#ifdef op_free
SWIFT_NAME(PerlInterpreter.op_free(self:_:))
PERL_STATIC_INLINE void CPerl_op_free(pTHX_ OP* _Nullable arg) {
	op_free(arg);
}
#endif

#ifdef op_null
SWIFT_NAME(PerlInterpreter.op_null(self:_:))
PERL_STATIC_INLINE void CPerl_op_null(pTHX_ OP* _Nonnull o) {
	op_null(o);
}
#endif

#ifdef pack_cat
SWIFT_NAME(PerlInterpreter.pack_cat(self:_:_:_:_:_:_:_:))
PERL_STATIC_INLINE void CPerl_pack_cat(pTHX_ SV *_Nonnull cat, const char *_Nonnull pat, const char *_Nonnull patend, SV *_Nonnull *_Nonnull beglist, SV *_Nonnull *_Nonnull endlist, SV *_Nonnull *_Nonnull *_Nonnull next_in_list, U32 flags) {
	pack_cat(cat, pat, patend, beglist, endlist, next_in_list, flags);
}
#endif

#ifdef packlist
SWIFT_NAME(PerlInterpreter.packlist(self:_:_:_:_:_:))
PERL_STATIC_INLINE void CPerl_packlist(pTHX_ SV *_Nonnull cat, const char *_Nonnull pat, const char *_Nonnull patend, SV *_Nonnull *_Nonnull beglist, SV *_Nonnull *_Nonnull endlist) {
	packlist(cat, pat, patend, beglist, endlist);
}
#endif

#ifdef pad_add_name_pv
SWIFT_NAME(PerlInterpreter.pad_add_name_pv(self:_:_:_:_:))
PERL_STATIC_INLINE PADOFFSET CPerl_pad_add_name_pv(pTHX_ const char *_Nonnull name, const U32 flags, HV *_Nullable typestash, HV *_Nullable ourstash) {
	return pad_add_name_pv(name, flags, typestash, ourstash);
}
#endif

#ifdef pad_add_name_pvn
SWIFT_NAME(PerlInterpreter.pad_add_name_pvn(self:_:_:_:_:_:))
PERL_STATIC_INLINE PADOFFSET CPerl_pad_add_name_pvn(pTHX_ const char *_Nonnull namepv, STRLEN namelen, U32 flags, HV *_Nullable typestash, HV *_Nullable ourstash) {
	return pad_add_name_pvn(namepv, namelen, flags, typestash, ourstash);
}
#endif

#ifdef pad_add_name_sv
SWIFT_NAME(PerlInterpreter.pad_add_name_sv(self:_:_:_:_:))
PERL_STATIC_INLINE PADOFFSET CPerl_pad_add_name_sv(pTHX_ SV *_Nonnull name, U32 flags, HV *_Nullable typestash, HV *_Nullable ourstash) {
	return pad_add_name_sv(name, flags, typestash, ourstash);
}
#endif

#ifdef pad_findmy_pv
SWIFT_NAME(PerlInterpreter.pad_findmy_pv(self:_:_:))
PERL_STATIC_INLINE PADOFFSET CPerl_pad_findmy_pv(pTHX_ const char* _Nonnull name, U32 flags) {
	return pad_findmy_pv(name, flags);
}
#endif

#ifdef pad_findmy_pvn
SWIFT_NAME(PerlInterpreter.pad_findmy_pvn(self:_:_:_:))
PERL_STATIC_INLINE PADOFFSET CPerl_pad_findmy_pvn(pTHX_ const char* _Nonnull namepv, STRLEN namelen, U32 flags) {
	return pad_findmy_pvn(namepv, namelen, flags);
}
#endif

#ifdef pad_findmy_sv
SWIFT_NAME(PerlInterpreter.pad_findmy_sv(self:_:_:))
PERL_STATIC_INLINE PADOFFSET CPerl_pad_findmy_sv(pTHX_ SV* _Nonnull name, U32 flags) {
	return pad_findmy_sv(name, flags);
}
#endif

SWIFT_NAME(PerlInterpreter.alloc())
PERL_STATIC_INLINE PerlInterpreter *_Nullable CPerl_perl_alloc(void) {
	return perl_alloc();
}

SWIFT_NAME(PerlInterpreter.construct(self:))
PERL_STATIC_INLINE void CPerl_perl_construct(PerlInterpreter *_Nonnull my_perl) {
	perl_construct(my_perl);
}

SWIFT_NAME(PerlInterpreter.destruct(self:))
PERL_STATIC_INLINE int CPerl_perl_destruct(PerlInterpreter *_Nonnull my_perl) {
	return perl_destruct(my_perl);
}

SWIFT_NAME(PerlInterpreter.free(self:))
PERL_STATIC_INLINE void CPerl_perl_free(PerlInterpreter *_Nonnull my_perl) {
	perl_free(my_perl);
}

SWIFT_NAME(PerlInterpreter.parse(self:_:_:_:_:))
PERL_STATIC_INLINE int CPerl_perl_parse(PerlInterpreter *_Nonnull my_perl, XSINIT_t _Nullable xsinit, int argc, char*_Nullable * _Nullable argv, char*_Nullable * _Nullable env) {
	return perl_parse(my_perl, xsinit, argc, argv, env);
}

SWIFT_NAME(PerlInterpreter.run(self:))
PERL_STATIC_INLINE int CPerl_perl_run(PerlInterpreter *_Nonnull my_perl) {
	return perl_run(my_perl);
}

#ifdef require_pv
SWIFT_NAME(PerlInterpreter.require_pv(self:_:))
PERL_STATIC_INLINE void CPerl_require_pv(pTHX_ const char* _Nonnull pv) {
	require_pv(pv);
}
#endif

#ifdef save_gp
SWIFT_NAME(PerlInterpreter.save_gp(self:_:_:))
PERL_STATIC_INLINE void CPerl_save_gp(pTHX_ GV* _Nonnull gv, I32 empty) {
	save_gp(gv, empty);
}
#endif

#ifdef scan_bin
SWIFT_NAME(PerlInterpreter.scan_bin(self:_:_:_:))
PERL_STATIC_INLINE NV CPerl_scan_bin(pTHX_ const char* _Nonnull start, STRLEN len, STRLEN* _Nonnull retlen) {
	return scan_bin(start, len, retlen);
}
#endif

#ifdef scan_hex
SWIFT_NAME(PerlInterpreter.scan_hex(self:_:_:_:))
PERL_STATIC_INLINE NV CPerl_scan_hex(pTHX_ const char* _Nonnull start, STRLEN len, STRLEN* _Nonnull retlen) {
	return scan_hex(start, len, retlen);
}
#endif

#ifdef scan_oct
SWIFT_NAME(PerlInterpreter.scan_oct(self:_:_:_:))
PERL_STATIC_INLINE NV CPerl_scan_oct(pTHX_ const char* _Nonnull start, STRLEN len, STRLEN* _Nonnull retlen) {
	return scan_oct(start, len, retlen);
}
#endif

#ifdef setdefout
SWIFT_NAME(PerlInterpreter.setdefout(self:_:))
PERL_STATIC_INLINE void CPerl_setdefout(pTHX_ GV* _Nonnull gv) {
	setdefout(gv);
}
#endif

#ifdef sortsv
SWIFT_NAME(PerlInterpreter.sortsv(self:_:_:_:))
PERL_STATIC_INLINE void CPerl_sortsv(pTHX_ SV*_Nullable * _Nullable array, size_t num_elts, SVCOMPARE_t _Nonnull cmp) {
	sortsv(array, num_elts, cmp);
}
#endif

#ifdef sortsv_flags
SWIFT_NAME(PerlInterpreter.sortsv_flags(self:_:_:_:_:))
PERL_STATIC_INLINE void CPerl_sortsv_flags(pTHX_ SV*_Nullable * _Nullable array, size_t num_elts, SVCOMPARE_t _Nonnull cmp, U32 flags) {
	sortsv_flags(array, num_elts, cmp, flags);
}
#endif

#ifdef sv_2bool
SWIFT_NAME(PerlInterpreter.sv_2bool(self:_:))
PERL_STATIC_INLINE bool CPerl_sv_2bool(pTHX_ SV *_Nonnull const sv) {
	return sv_2bool(sv);
}
#endif

#ifdef sv_2bool_flags
SWIFT_NAME(PerlInterpreter.sv_2bool_flags(self:_:_:))
PERL_STATIC_INLINE bool CPerl_sv_2bool_flags(pTHX_ SV *_Nonnull sv, I32 flags) {
	return sv_2bool_flags(sv, flags);
}
#endif

#ifdef sv_2iv_flags
SWIFT_NAME(PerlInterpreter.sv_2iv_flags(self:_:_:))
PERL_STATIC_INLINE IV CPerl_sv_2iv_flags(pTHX_ SV *_Nonnull const sv, const I32 flags) {
	return sv_2iv_flags(sv, flags);
}
#endif

#ifdef sv_2mortal
SWIFT_NAME(PerlInterpreter.sv_2mortal(self:_:))
PERL_STATIC_INLINE SV *_Nullable CPerl_sv_2mortal(pTHX_ SV *_Nullable const sv) {
	return sv_2mortal(sv);
}
#endif

#ifdef sv_2nv_flags
SWIFT_NAME(PerlInterpreter.sv_2nv_flags(self:_:_:))
PERL_STATIC_INLINE NV CPerl_sv_2nv_flags(pTHX_ SV *_Nonnull const sv, const I32 flags) {
	return sv_2nv_flags(sv, flags);
}
#endif

#ifdef sv_2uv_flags
SWIFT_NAME(PerlInterpreter.sv_2uv_flags(self:_:_:))
PERL_STATIC_INLINE UV CPerl_sv_2uv_flags(pTHX_ SV *_Nonnull const sv, const I32 flags) {
	return sv_2uv_flags(sv, flags);
}
#endif

#ifdef sv_backoff
SWIFT_NAME(PerlInterpreter.sv_backoff(self:_:))
PERL_STATIC_INLINE void CPerl_sv_backoff(pTHX_ SV *_Nonnull const sv) {
	sv_backoff(sv);
}
#endif

#ifdef sv_cat_decode
SWIFT_NAME(PerlInterpreter.sv_cat_decode(self:_:_:_:_:_:_:))
PERL_STATIC_INLINE bool CPerl_sv_cat_decode(pTHX_ SV* _Nonnull dsv, SV *_Nonnull encoding, SV *_Nonnull ssv, int *_Nonnull offset, char* _Nonnull tstr, int tlen) {
	return sv_cat_decode(dsv, encoding, ssv, offset, tstr, tlen);
}
#endif

#ifdef sv_catpv
SWIFT_NAME(PerlInterpreter.sv_catpv(self:_:_:))
PERL_STATIC_INLINE void CPerl_sv_catpv(pTHX_ SV *_Nonnull const sv, const char* _Nullable ptr) {
	sv_catpv(sv, ptr);
}
#endif

#ifdef sv_catpv_flags
SWIFT_NAME(PerlInterpreter.sv_catpv_flags(self:_:_:_:))
PERL_STATIC_INLINE void CPerl_sv_catpv_flags(pTHX_ SV *_Nonnull dstr, const char *_Nonnull sstr, const I32 flags) {
	sv_catpv_flags(dstr, sstr, flags);
}
#endif

#ifdef sv_catpv_mg
SWIFT_NAME(PerlInterpreter.sv_catpv_mg(self:_:_:))
PERL_STATIC_INLINE void CPerl_sv_catpv_mg(pTHX_ SV *_Nonnull const sv, const char *_Nullable const ptr) {
	sv_catpv_mg(sv, ptr);
}
#endif

#ifdef sv_catpvn
SWIFT_NAME(PerlInterpreter.sv_catpvn(self:_:_:_:))
PERL_STATIC_INLINE void CPerl_sv_catpvn(pTHX_ SV *_Nonnull dsv, const char *_Nonnull sstr, STRLEN len) {
	sv_catpvn(dsv, sstr, len);
}
#endif

#ifdef sv_catpvn_flags
SWIFT_NAME(PerlInterpreter.sv_catpvn_flags(self:_:_:_:_:))
PERL_STATIC_INLINE void CPerl_sv_catpvn_flags(pTHX_ SV *_Nonnull const dstr, const char *_Nonnull sstr, const STRLEN len, const I32 flags) {
	sv_catpvn_flags(dstr, sstr, len, flags);
}
#endif

#ifdef sv_catpvn_mg
SWIFT_NAME(PerlInterpreter.sv_catpvn_mg(self:_:_:_:))
PERL_STATIC_INLINE void CPerl_sv_catpvn_mg(pTHX_ SV *_Nonnull sv, const char *_Nonnull ptr, STRLEN len) {
	sv_catpvn_mg(sv, ptr, len);
}
#endif

#ifdef sv_catsv
SWIFT_NAME(PerlInterpreter.sv_catsv(self:_:_:))
PERL_STATIC_INLINE void CPerl_sv_catsv(pTHX_ SV *_Nonnull dstr, SV *_Nullable sstr) {
	sv_catsv(dstr, sstr);
}
#endif

#ifdef sv_catsv_flags
SWIFT_NAME(PerlInterpreter.sv_catsv_flags(self:_:_:_:))
PERL_STATIC_INLINE void CPerl_sv_catsv_flags(pTHX_ SV *_Nonnull const dsv, SV *_Nullable const ssv, const I32 flags) {
	sv_catsv_flags(dsv, ssv, flags);
}
#endif

#ifdef sv_catsv_mg
SWIFT_NAME(PerlInterpreter.sv_catsv_mg(self:_:_:))
PERL_STATIC_INLINE void CPerl_sv_catsv_mg(pTHX_ SV *_Nonnull dsv, SV *_Nullable ssv) {
	sv_catsv_mg(dsv, ssv);
}
#endif

#ifdef sv_chop
SWIFT_NAME(PerlInterpreter.sv_chop(self:_:_:))
PERL_STATIC_INLINE void CPerl_sv_chop(pTHX_ SV *_Nonnull const sv, const char *_Nullable const ptr) {
	sv_chop(sv, ptr);
}
#endif

#ifdef sv_clear
SWIFT_NAME(PerlInterpreter.sv_clear(self:_:))
PERL_STATIC_INLINE void CPerl_sv_clear(pTHX_ SV *_Nonnull const orig_sv) {
	sv_clear(orig_sv);
}
#endif

#ifdef sv_cmp_flags
SWIFT_NAME(PerlInterpreter.sv_cmp_flags(self:_:_:_:))
PERL_STATIC_INLINE I32 CPerl_sv_cmp_flags(pTHX_ SV *_Nullable const sv1, SV *_Nullable const sv2, const U32 flags) {
	return sv_cmp_flags(sv1, sv2, flags);
}
#endif

#ifdef sv_cmp_locale_flags
SWIFT_NAME(PerlInterpreter.sv_cmp_locale_flags(self:_:_:_:))
PERL_STATIC_INLINE I32 CPerl_sv_cmp_locale_flags(pTHX_ SV *_Nullable const sv1, SV *_Nullable const sv2, const U32 flags) {
	return sv_cmp_locale_flags(sv1, sv2, flags);
}
#endif

#ifdef sv_copypv_flags
SWIFT_NAME(PerlInterpreter.sv_copypv_flags(self:_:_:_:))
PERL_STATIC_INLINE void CPerl_sv_copypv_flags(pTHX_ SV *_Nonnull const dsv, SV *_Nonnull const ssv, const I32 flags) {
	sv_copypv_flags(dsv, ssv, flags);
}
#endif

#ifdef sv_copypv_nomg
SWIFT_NAME(PerlInterpreter.sv_copypv_nomg(self:_:_:))
PERL_STATIC_INLINE void CPerl_sv_copypv_nomg(pTHX_ SV *_Nonnull const dsv, SV *_Nonnull const ssv) {
	sv_copypv_nomg(dsv, ssv);
}
#endif

#ifdef sv_dec
SWIFT_NAME(PerlInterpreter.sv_dec(self:_:))
PERL_STATIC_INLINE void CPerl_sv_dec(pTHX_ SV *_Nullable const sv) {
	sv_dec(sv);
}
#endif

#ifdef sv_dec_nomg
SWIFT_NAME(PerlInterpreter.sv_dec_nomg(self:_:))
PERL_STATIC_INLINE void CPerl_sv_dec_nomg(pTHX_ SV *_Nullable const sv) {
	sv_dec_nomg(sv);
}
#endif

#ifdef sv_derived_from
SWIFT_NAME(PerlInterpreter.sv_derived_from(self:_:_:))
PERL_STATIC_INLINE bool CPerl_sv_derived_from(pTHX_ SV* _Nonnull sv, const char *_Nonnull const name) {
	return sv_derived_from(sv, name);
}
#endif

#ifdef sv_derived_from_pv
SWIFT_NAME(PerlInterpreter.sv_derived_from_pv(self:_:_:_:))
PERL_STATIC_INLINE bool CPerl_sv_derived_from_pv(pTHX_ SV* _Nonnull sv, const char *_Nonnull const name, U32 flags) {
	return sv_derived_from_pv(sv, name, flags);
}
#endif

#ifdef sv_derived_from_pvn
SWIFT_NAME(PerlInterpreter.sv_derived_from_pvn(self:_:_:_:_:))
PERL_STATIC_INLINE bool CPerl_sv_derived_from_pvn(pTHX_ SV* _Nonnull sv, const char *_Nonnull const name, const STRLEN len, U32 flags) {
	return sv_derived_from_pvn(sv, name, len, flags);
}
#endif

#ifdef sv_derived_from_sv
SWIFT_NAME(PerlInterpreter.sv_derived_from_sv(self:_:_:_:))
PERL_STATIC_INLINE bool CPerl_sv_derived_from_sv(pTHX_ SV* _Nonnull sv, SV *_Nonnull namesv, U32 flags) {
	return sv_derived_from_sv(sv, namesv, flags);
}
#endif

#ifdef sv_destroyable
SWIFT_NAME(PerlInterpreter.sv_destroyable(self:_:))
PERL_STATIC_INLINE bool CPerl_sv_destroyable(pTHX_ SV *_Nullable sv) {
	return sv_destroyable(sv);
}
#endif

#ifdef sv_does
SWIFT_NAME(PerlInterpreter.sv_does(self:_:_:))
PERL_STATIC_INLINE bool CPerl_sv_does(pTHX_ SV* _Nonnull sv, const char *_Nonnull const name) {
	return sv_does(sv, name);
}
#endif

#ifdef sv_does_pv
SWIFT_NAME(PerlInterpreter.sv_does_pv(self:_:_:_:))
PERL_STATIC_INLINE bool CPerl_sv_does_pv(pTHX_ SV* _Nonnull sv, const char *_Nonnull const name, U32 flags) {
	return sv_does_pv(sv, name, flags);
}
#endif

#ifdef sv_does_pvn
SWIFT_NAME(PerlInterpreter.sv_does_pvn(self:_:_:_:_:))
PERL_STATIC_INLINE bool CPerl_sv_does_pvn(pTHX_ SV* _Nonnull sv, const char *_Nonnull const name, const STRLEN len, U32 flags) {
	return sv_does_pvn(sv, name, len, flags);
}
#endif

#ifdef sv_does_sv
SWIFT_NAME(PerlInterpreter.sv_does_sv(self:_:_:_:))
PERL_STATIC_INLINE bool CPerl_sv_does_sv(pTHX_ SV* _Nonnull sv, SV* _Nonnull namesv, U32 flags) {
	return sv_does_sv(sv, namesv, flags);
}
#endif

#ifdef sv_dump
SWIFT_NAME(PerlInterpreter.sv_dump(self:_:))
PERL_STATIC_INLINE void CPerl_sv_dump(pTHX_ SV* _Nonnull sv) {
	sv_dump(sv);
}
#endif

#ifdef sv_eq
SWIFT_NAME(PerlInterpreter.sv_eq(self:_:_:))
PERL_STATIC_INLINE bool CPerl_sv_eq(pTHX_ SV* _Nullable sv1, SV* _Nullable sv2) {
	return sv_eq(sv1, sv2);
}
#endif

#ifdef sv_eq_flags
SWIFT_NAME(PerlInterpreter.sv_eq_flags(self:_:_:_:))
PERL_STATIC_INLINE bool CPerl_sv_eq_flags(pTHX_ SV* _Nullable sv1, SV* _Nullable sv2, const U32 flags) {
	return sv_eq_flags(sv1, sv2, flags);
}
#endif

#ifdef sv_force_normal
SWIFT_NAME(PerlInterpreter.sv_force_normal(self:_:))
PERL_STATIC_INLINE void CPerl_sv_force_normal(pTHX_ SV *_Nonnull sv) {
	sv_force_normal(sv);
}
#endif

#ifdef sv_force_normal_flags
SWIFT_NAME(PerlInterpreter.sv_force_normal_flags(self:_:_:))
PERL_STATIC_INLINE void CPerl_sv_force_normal_flags(pTHX_ SV *_Nonnull const sv, const U32 flags) {
	sv_force_normal_flags(sv, flags);
}
#endif

#ifdef sv_free
SWIFT_NAME(PerlInterpreter.sv_free(self:_:))
PERL_STATIC_INLINE void CPerl_sv_free(pTHX_ SV *_Nullable const sv) {
	sv_free(sv);
}
#endif

#ifdef sv_inc
SWIFT_NAME(PerlInterpreter.sv_inc(self:_:))
PERL_STATIC_INLINE void CPerl_sv_inc(pTHX_ SV *_Nullable const sv) {
	sv_inc(sv);
}
#endif

#ifdef sv_inc_nomg
SWIFT_NAME(PerlInterpreter.sv_inc_nomg(self:_:))
PERL_STATIC_INLINE void CPerl_sv_inc_nomg(pTHX_ SV *_Nullable const sv) {
	sv_inc_nomg(sv);
}
#endif

#ifdef sv_insert
SWIFT_NAME(PerlInterpreter.sv_insert(self:_:_:_:_:_:))
PERL_STATIC_INLINE void CPerl_sv_insert(pTHX_ SV *_Nonnull const bigstr, const STRLEN offset, const STRLEN len, const char *_Nonnull const little, const STRLEN littlelen) {
	sv_insert(bigstr, offset, len, little, littlelen);
}
#endif

#ifdef sv_insert_flags
SWIFT_NAME(PerlInterpreter.sv_insert_flags(self:_:_:_:_:_:_:))
PERL_STATIC_INLINE void CPerl_sv_insert_flags(pTHX_ SV *_Nonnull const bigstr, const STRLEN offset, const STRLEN len, const char *_Nonnull const little, const STRLEN littlelen, const U32 flags) {
	sv_insert_flags(bigstr, offset, len, little, littlelen, flags);
}
#endif

#ifdef sv_isa
SWIFT_NAME(PerlInterpreter.sv_isa(self:_:_:))
PERL_STATIC_INLINE bool CPerl_sv_isa(pTHX_ SV* _Nullable sv, const char *_Nonnull const name) {
	return sv_isa(sv, name);
}
#endif

#ifdef sv_isobject
SWIFT_NAME(PerlInterpreter.sv_isobject(self:_:))
PERL_STATIC_INLINE bool CPerl_sv_isobject(pTHX_ SV* _Nullable sv) {
	return sv_isobject(sv);
}
#endif

#ifdef sv_iv
SWIFT_NAME(PerlInterpreter.sv_iv(self:_:))
PERL_STATIC_INLINE IV CPerl_sv_iv(pTHX_ SV* _Nonnull sv) {
	return sv_iv(sv);
}
#endif

#ifdef sv_len
SWIFT_NAME(PerlInterpreter.sv_len(self:_:))
PERL_STATIC_INLINE STRLEN CPerl_sv_len(pTHX_ SV *_Nullable const sv) {
	return sv_len(sv);
}
#endif

#ifdef sv_len_utf8
SWIFT_NAME(PerlInterpreter.sv_len_utf8(self:_:))
PERL_STATIC_INLINE STRLEN CPerl_sv_len_utf8(pTHX_ SV *_Nullable const sv) {
	return sv_len_utf8(sv);
}
#endif

#ifdef sv_magic
SWIFT_NAME(PerlInterpreter.sv_magic(self:_:_:_:_:_:))
PERL_STATIC_INLINE void CPerl_sv_magic(pTHX_ SV *_Nonnull const sv, SV *_Nullable const obj, const int how, const char *_Nullable const name, const I32 namlen) {
	sv_magic(sv, obj, how, name, namlen);
}
#endif

#ifdef sv_magicext
SWIFT_NAME(PerlInterpreter.sv_magicext(self:_:_:_:_:_:_:))
PERL_STATIC_INLINE MAGIC  *_Nonnull CPerl_sv_magicext(pTHX_ SV *_Nonnull const sv, SV *_Nullable const obj, const int how, const MGVTBL *_Nullable const vtbl, const char *_Nullable const name, const I32 namlen) {
	return sv_magicext(sv, obj, how, vtbl, name, namlen);
}
#endif

#ifdef sv_nosharing
SWIFT_NAME(PerlInterpreter.sv_nosharing(self:_:))
PERL_STATIC_INLINE void CPerl_sv_nosharing(pTHX_ SV *_Nullable sv) {
	sv_nosharing(sv);
}
#endif

#ifdef sv_nv
SWIFT_NAME(PerlInterpreter.sv_nv(self:_:))
PERL_STATIC_INLINE NV CPerl_sv_nv(pTHX_ SV* _Nonnull sv) {
	return sv_nv(sv);
}
#endif

#ifdef sv_pos_b2u
SWIFT_NAME(PerlInterpreter.sv_pos_b2u(self:_:_:))
PERL_STATIC_INLINE void CPerl_sv_pos_b2u(pTHX_ SV *_Nullable const sv, I32 *_Nonnull const offsetp) {
	sv_pos_b2u(sv, offsetp);
}
#endif

#ifdef sv_pos_b2u_flags
SWIFT_NAME(PerlInterpreter.sv_pos_b2u_flags(self:_:_:_:))
PERL_STATIC_INLINE STRLEN CPerl_sv_pos_b2u_flags(pTHX_ SV *_Nonnull const sv, STRLEN const offset, U32 flags) {
	return sv_pos_b2u_flags(sv, offset, flags);
}
#endif

#ifdef sv_pos_u2b
SWIFT_NAME(PerlInterpreter.sv_pos_u2b(self:_:_:_:))
PERL_STATIC_INLINE void CPerl_sv_pos_u2b(pTHX_ SV *_Nullable const sv, I32 *_Nonnull const offsetp, I32 *_Nullable const lenp) {
	sv_pos_u2b(sv, offsetp, lenp);
}
#endif

#ifdef sv_pos_u2b_flags
SWIFT_NAME(PerlInterpreter.sv_pos_u2b_flags(self:_:_:_:_:))
PERL_STATIC_INLINE STRLEN CPerl_sv_pos_u2b_flags(pTHX_ SV *_Nonnull const sv, STRLEN uoffset, STRLEN *_Nullable const lenp, U32 flags) {
	return sv_pos_u2b_flags(sv, uoffset, lenp, flags);
}
#endif

#ifdef sv_reftype
SWIFT_NAME(PerlInterpreter.sv_reftype(self:_:_:))
PERL_STATIC_INLINE const char *_Nonnull CPerl_sv_reftype(pTHX_ const SV *_Nonnull const sv, bool ob) {
	return sv_reftype(sv, ob);
}
#endif

#ifdef sv_replace
SWIFT_NAME(PerlInterpreter.sv_replace(self:_:_:))
PERL_STATIC_INLINE void CPerl_sv_replace(pTHX_ SV *_Nonnull const sv, SV *_Nonnull const nsv) {
	sv_replace(sv, nsv);
}
#endif

#ifdef sv_report_used
SWIFT_NAME(PerlInterpreter.sv_report_used(self:))
PERL_STATIC_INLINE void CPerl_sv_report_used(pTHX) {
	sv_report_used();
}
#endif

#ifdef sv_reset
SWIFT_NAME(PerlInterpreter.sv_reset(self:_:_:))
PERL_STATIC_INLINE void CPerl_sv_reset(pTHX_ const char* _Nonnull s, HV *_Nullable const stash) {
	sv_reset(s, stash);
}
#endif

#ifdef sv_setiv
SWIFT_NAME(PerlInterpreter.sv_setiv(self:_:_:))
PERL_STATIC_INLINE void CPerl_sv_setiv(pTHX_ SV *_Nonnull const sv, const IV num) {
	sv_setiv(sv, num);
}
#endif

#ifdef sv_setiv_mg
SWIFT_NAME(PerlInterpreter.sv_setiv_mg(self:_:_:))
PERL_STATIC_INLINE void CPerl_sv_setiv_mg(pTHX_ SV *_Nonnull const sv, const IV i) {
	sv_setiv_mg(sv, i);
}
#endif

#ifdef sv_setnv
SWIFT_NAME(PerlInterpreter.sv_setnv(self:_:_:))
PERL_STATIC_INLINE void CPerl_sv_setnv(pTHX_ SV *_Nonnull const sv, const NV num) {
	sv_setnv(sv, num);
}
#endif

#ifdef sv_setnv_mg
SWIFT_NAME(PerlInterpreter.sv_setnv_mg(self:_:_:))
PERL_STATIC_INLINE void CPerl_sv_setnv_mg(pTHX_ SV *_Nonnull const sv, const NV num) {
	sv_setnv_mg(sv, num);
}
#endif

#ifdef sv_setpv
SWIFT_NAME(PerlInterpreter.sv_setpv(self:_:_:))
PERL_STATIC_INLINE void CPerl_sv_setpv(pTHX_ SV *_Nonnull const sv, const char *_Nullable const ptr) {
	sv_setpv(sv, ptr);
}
#endif

#ifdef sv_setpv_mg
SWIFT_NAME(PerlInterpreter.sv_setpv_mg(self:_:_:))
PERL_STATIC_INLINE void CPerl_sv_setpv_mg(pTHX_ SV *_Nonnull const sv, const char *_Nullable const ptr) {
	sv_setpv_mg(sv, ptr);
}
#endif

#ifdef sv_setpviv
SWIFT_NAME(PerlInterpreter.sv_setpviv(self:_:_:))
PERL_STATIC_INLINE void CPerl_sv_setpviv(pTHX_ SV *_Nonnull const sv, const IV num) {
	sv_setpviv(sv, num);
}
#endif

#ifdef sv_setpviv_mg
SWIFT_NAME(PerlInterpreter.sv_setpviv_mg(self:_:_:))
PERL_STATIC_INLINE void CPerl_sv_setpviv_mg(pTHX_ SV *_Nonnull const sv, const IV iv) {
	sv_setpviv_mg(sv, iv);
}
#endif

#ifdef sv_setpvn
SWIFT_NAME(PerlInterpreter.sv_setpvn(self:_:_:_:))
PERL_STATIC_INLINE void CPerl_sv_setpvn(pTHX_ SV *_Nonnull const sv, const char *_Nullable const ptr, const STRLEN len) {
	sv_setpvn(sv, ptr, len);
}
#endif

#ifdef sv_setpvn_mg
SWIFT_NAME(PerlInterpreter.sv_setpvn_mg(self:_:_:_:))
PERL_STATIC_INLINE void CPerl_sv_setpvn_mg(pTHX_ SV *_Nonnull const sv, const char *_Nonnull const ptr, const STRLEN len) {
	sv_setpvn_mg(sv, ptr, len);
}
#endif

#ifdef sv_setref_iv
SWIFT_NAME(PerlInterpreter.sv_setref_iv(self:_:_:_:))
PERL_STATIC_INLINE SV *_Nonnull CPerl_sv_setref_iv(pTHX_ SV *_Nonnull const rv, const char *_Nullable const classname, const IV iv) {
	return sv_setref_iv(rv, classname, iv);
}
#endif

#ifdef sv_setref_nv
SWIFT_NAME(PerlInterpreter.sv_setref_nv(self:_:_:_:))
PERL_STATIC_INLINE SV *_Nonnull CPerl_sv_setref_nv(pTHX_ SV *_Nonnull const rv, const char *_Nullable const classname, const NV nv) {
	return sv_setref_nv(rv, classname, nv);
}
#endif

#ifdef sv_setref_pv
SWIFT_NAME(PerlInterpreter.sv_setref_pv(self:_:_:_:))
PERL_STATIC_INLINE SV *_Nonnull CPerl_sv_setref_pv(pTHX_ SV *_Nonnull const rv, const char *_Nullable const classname, void *_Nullable const pv) {
	return sv_setref_pv(rv, classname, pv);
}
#endif

#ifdef sv_setref_pvn
SWIFT_NAME(PerlInterpreter.sv_setref_pvn(self:_:_:_:_:))
PERL_STATIC_INLINE SV *_Nonnull CPerl_sv_setref_pvn(pTHX_ SV *_Nonnull const rv, const char *_Nullable const classname, const char *_Nonnull const pv, const STRLEN n) {
	return sv_setref_pvn(rv, classname, pv, n);
}
#endif

#ifdef sv_setref_uv
SWIFT_NAME(PerlInterpreter.sv_setref_uv(self:_:_:_:))
PERL_STATIC_INLINE SV *_Nonnull CPerl_sv_setref_uv(pTHX_ SV *_Nonnull const rv, const char *_Nullable const classname, const UV uv) {
	return sv_setref_uv(rv, classname, uv);
}
#endif

#ifdef sv_setsv
SWIFT_NAME(PerlInterpreter.sv_setsv(self:_:_:))
PERL_STATIC_INLINE void CPerl_sv_setsv(pTHX_ SV *_Nonnull dstr, SV *_Nullable sstr) {
	sv_setsv(dstr, sstr);
}
#endif

#ifdef sv_setsv_flags
SWIFT_NAME(PerlInterpreter.sv_setsv_flags(self:_:_:_:))
PERL_STATIC_INLINE void CPerl_sv_setsv_flags(pTHX_ SV *_Nonnull dstr, SV *_Nullable sstr, const I32 flags) {
	sv_setsv_flags(dstr, sstr, flags);
}
#endif

#ifdef sv_setsv_mg
SWIFT_NAME(PerlInterpreter.sv_setsv_mg(self:_:_:))
PERL_STATIC_INLINE void CPerl_sv_setsv_mg(pTHX_ SV *_Nonnull const dstr, SV *_Nullable const sstr) {
	sv_setsv_mg(dstr, sstr);
}
#endif

#ifdef sv_setuv
SWIFT_NAME(PerlInterpreter.sv_setuv(self:_:_:))
PERL_STATIC_INLINE void CPerl_sv_setuv(pTHX_ SV *_Nonnull const sv, const UV num) {
	sv_setuv(sv, num);
}
#endif

#ifdef sv_setuv_mg
SWIFT_NAME(PerlInterpreter.sv_setuv_mg(self:_:_:))
PERL_STATIC_INLINE void CPerl_sv_setuv_mg(pTHX_ SV *_Nonnull const sv, const UV u) {
	sv_setuv_mg(sv, u);
}
#endif

#ifdef sv_taint
SWIFT_NAME(PerlInterpreter.sv_taint(self:_:))
PERL_STATIC_INLINE void CPerl_sv_taint(pTHX_ SV* _Nonnull sv) {
	sv_taint(sv);
}
#endif

#ifdef sv_tainted
SWIFT_NAME(PerlInterpreter.sv_tainted(self:_:))
PERL_STATIC_INLINE bool CPerl_sv_tainted(pTHX_ SV *_Nonnull const sv) {
	return sv_tainted(sv);
}
#endif

#ifdef sv_true
SWIFT_NAME(PerlInterpreter.sv_true(self:_:))
PERL_STATIC_INLINE bool CPerl_sv_true(pTHX_ SV *_Nullable const sv) {
	return sv_true(sv);
}
#endif

#ifdef sv_unmagic
SWIFT_NAME(PerlInterpreter.sv_unmagic(self:_:_:))
PERL_STATIC_INLINE int CPerl_sv_unmagic(pTHX_ SV *_Nonnull const sv, const int type) {
	return sv_unmagic(sv, type);
}
#endif

#ifdef sv_unmagicext
SWIFT_NAME(PerlInterpreter.sv_unmagicext(self:_:_:_:))
PERL_STATIC_INLINE int CPerl_sv_unmagicext(pTHX_ SV *_Nonnull const sv, const int type, MGVTBL *_Nullable vtbl) {
	return sv_unmagicext(sv, type, vtbl);
}
#endif

#ifdef sv_unref
SWIFT_NAME(PerlInterpreter.sv_unref(self:_:))
PERL_STATIC_INLINE void CPerl_sv_unref(pTHX_ SV* _Nonnull sv) {
	sv_unref(sv);
}
#endif

#ifdef sv_unref_flags
SWIFT_NAME(PerlInterpreter.sv_unref_flags(self:_:_:))
PERL_STATIC_INLINE void CPerl_sv_unref_flags(pTHX_ SV *_Nonnull const ref, const U32 flags) {
	sv_unref_flags(ref, flags);
}
#endif

#ifdef sv_untaint
SWIFT_NAME(PerlInterpreter.sv_untaint(self:_:))
PERL_STATIC_INLINE void CPerl_sv_untaint(pTHX_ SV *_Nonnull const sv) {
	sv_untaint(sv);
}
#endif

#ifdef sv_upgrade
SWIFT_NAME(PerlInterpreter.sv_upgrade(self:_:_:))
PERL_STATIC_INLINE void CPerl_sv_upgrade(pTHX_ SV *_Nonnull const sv, svtype new_type) {
	sv_upgrade(sv, new_type);
}
#endif

#ifdef sv_usepvn
SWIFT_NAME(PerlInterpreter.sv_usepvn(self:_:_:_:))
PERL_STATIC_INLINE void CPerl_sv_usepvn(pTHX_ SV* _Nonnull sv, char* _Nullable ptr, STRLEN len) {
	sv_usepvn(sv, ptr, len);
}
#endif

#ifdef sv_usepvn_flags
SWIFT_NAME(PerlInterpreter.sv_usepvn_flags(self:_:_:_:_:))
PERL_STATIC_INLINE void CPerl_sv_usepvn_flags(pTHX_ SV *_Nonnull const sv, char* _Nullable ptr, const STRLEN len, const U32 flags) {
	sv_usepvn_flags(sv, ptr, len, flags);
}
#endif

#ifdef sv_usepvn_mg
SWIFT_NAME(PerlInterpreter.sv_usepvn_mg(self:_:_:_:))
PERL_STATIC_INLINE void CPerl_sv_usepvn_mg(pTHX_ SV *_Nonnull sv, char *_Nullable ptr, STRLEN len) {
	sv_usepvn_mg(sv, ptr, len);
}
#endif

#ifdef sv_utf8_decode
SWIFT_NAME(PerlInterpreter.sv_utf8_decode(self:_:))
PERL_STATIC_INLINE bool CPerl_sv_utf8_decode(pTHX_ SV *_Nonnull const sv) {
	return sv_utf8_decode(sv);
}
#endif

#ifdef sv_utf8_encode
SWIFT_NAME(PerlInterpreter.sv_utf8_encode(self:_:))
PERL_STATIC_INLINE void CPerl_sv_utf8_encode(pTHX_ SV *_Nonnull const sv) {
	sv_utf8_encode(sv);
}
#endif

#ifdef sv_utf8_upgrade
SWIFT_NAME(PerlInterpreter.sv_utf8_upgrade(self:_:))
PERL_STATIC_INLINE STRLEN CPerl_sv_utf8_upgrade(pTHX_ SV *_Nonnull sv) {
	return sv_utf8_upgrade(sv);
}
#endif

#ifdef sv_utf8_upgrade_flags
SWIFT_NAME(PerlInterpreter.sv_utf8_upgrade_flags(self:_:_:))
PERL_STATIC_INLINE STRLEN CPerl_sv_utf8_upgrade_flags(pTHX_ SV *_Nonnull const sv, const I32 flags) {
	return sv_utf8_upgrade_flags(sv, flags);
}
#endif

#ifdef sv_utf8_upgrade_nomg
SWIFT_NAME(PerlInterpreter.sv_utf8_upgrade_nomg(self:_:))
PERL_STATIC_INLINE STRLEN CPerl_sv_utf8_upgrade_nomg(pTHX_ SV *_Nonnull sv) {
	return sv_utf8_upgrade_nomg(sv);
}
#endif

#ifdef sv_uv
SWIFT_NAME(PerlInterpreter.sv_uv(self:_:))
PERL_STATIC_INLINE UV CPerl_sv_uv(pTHX_ SV* _Nonnull sv) {
	return sv_uv(sv);
}
#endif

#ifdef sv_vcatpvf
SWIFT_NAME(PerlInterpreter.sv_vcatpvf(self:_:_:_:))
PERL_STATIC_INLINE void CPerl_sv_vcatpvf(pTHX_ SV *_Nonnull const sv, const char *_Nonnull const pat, va_list *_Nullable const args) {
	sv_vcatpvf(sv, pat, args);
}
#endif

#ifdef sv_vcatpvf_mg
SWIFT_NAME(PerlInterpreter.sv_vcatpvf_mg(self:_:_:_:))
PERL_STATIC_INLINE void CPerl_sv_vcatpvf_mg(pTHX_ SV *_Nonnull const sv, const char *_Nonnull const pat, va_list *_Nullable const args) {
	sv_vcatpvf_mg(sv, pat, args);
}
#endif

#ifdef sv_vcatpvfn_flags
SWIFT_NAME(PerlInterpreter.sv_vcatpvfn_flags(self:_:_:_:_:_:_:_:_:))
PERL_STATIC_INLINE void CPerl_sv_vcatpvfn_flags(pTHX_ SV *_Nonnull const sv, const char *_Nonnull const pat, const STRLEN patlen, va_list *_Nullable const args, SV *_Nullable *_Nullable const svargs, const I32 svmax, bool *_Nullable const maybe_tainted, const U32 flags) {
	sv_vcatpvfn_flags(sv, pat, patlen, args, svargs, svmax, maybe_tainted, flags);
}
#endif

#ifdef sv_vsetpvf
SWIFT_NAME(PerlInterpreter.sv_vsetpvf(self:_:_:_:))
PERL_STATIC_INLINE void CPerl_sv_vsetpvf(pTHX_ SV *_Nonnull const sv, const char *_Nonnull const pat, va_list *_Nullable const args) {
	sv_vsetpvf(sv, pat, args);
}
#endif

#ifdef sv_vsetpvf_mg
SWIFT_NAME(PerlInterpreter.sv_vsetpvf_mg(self:_:_:_:))
PERL_STATIC_INLINE void CPerl_sv_vsetpvf_mg(pTHX_ SV *_Nonnull const sv, const char *_Nonnull const pat, va_list *_Nullable const args) {
	sv_vsetpvf_mg(sv, pat, args);
}
#endif

#ifdef sync_locale
SWIFT_NAME(PerlInterpreter.sync_locale(self:))
PERL_STATIC_INLINE void CPerl_sync_locale(pTHX) {
	sync_locale();
}
#endif

#ifdef to_utf8_fold
SWIFT_NAME(PerlInterpreter.to_utf8_fold(self:_:_:_:))
PERL_STATIC_INLINE UV CPerl_to_utf8_fold(pTHX_ const U8 *_Nonnull p, U8* _Nonnull ustrp, STRLEN *_Nullable lenp) {
	return to_utf8_fold(p, ustrp, lenp);
}
#endif

#ifdef to_utf8_lower
SWIFT_NAME(PerlInterpreter.to_utf8_lower(self:_:_:_:))
PERL_STATIC_INLINE UV CPerl_to_utf8_lower(pTHX_ const U8 *_Nonnull p, U8* _Nonnull ustrp, STRLEN *_Nullable lenp) {
	return to_utf8_lower(p, ustrp, lenp);
}
#endif

#ifdef to_utf8_title
SWIFT_NAME(PerlInterpreter.to_utf8_title(self:_:_:_:))
PERL_STATIC_INLINE UV CPerl_to_utf8_title(pTHX_ const U8 *_Nonnull p, U8* _Nonnull ustrp, STRLEN *_Nullable lenp) {
	return to_utf8_title(p, ustrp, lenp);
}
#endif

#ifdef to_utf8_upper
SWIFT_NAME(PerlInterpreter.to_utf8_upper(self:_:_:_:))
PERL_STATIC_INLINE UV CPerl_to_utf8_upper(pTHX_ const U8 *_Nonnull p, U8* _Nonnull ustrp, STRLEN *_Nullable lenp) {
	return to_utf8_upper(p, ustrp, lenp);
}
#endif

#ifdef unpack_str
SWIFT_NAME(PerlInterpreter.unpack_str(self:_:_:_:_:_:_:_:_:))
PERL_STATIC_INLINE I32 CPerl_unpack_str(pTHX_ const char *_Nonnull pat, const char *_Nonnull patend, const char *_Nonnull s, const char *_Nullable strbeg, const char *_Nonnull strend, char *_Nullable *_Nullable new_s, I32 ocnt, U32 flags) {
	return unpack_str(pat, patend, s, strbeg, strend, new_s, ocnt, flags);
}
#endif

#ifdef unpackstring
SWIFT_NAME(PerlInterpreter.unpackstring(self:_:_:_:_:_:))
PERL_STATIC_INLINE I32 CPerl_unpackstring(pTHX_ const char *_Nonnull pat, const char *_Nonnull patend, const char *_Nonnull s, const char *_Nonnull strend, U32 flags) {
	return unpackstring(pat, patend, s, strend, flags);
}
#endif

#ifdef utf8_distance
SWIFT_NAME(PerlInterpreter.utf8_distance(self:_:_:))
PERL_STATIC_INLINE IV CPerl_utf8_distance(pTHX_ const U8 *_Nonnull a, const U8 *_Nonnull b) {
	return utf8_distance(a, b);
}
#endif

#ifdef utf8_length
SWIFT_NAME(PerlInterpreter.utf8_length(self:_:_:))
PERL_STATIC_INLINE STRLEN CPerl_utf8_length(pTHX_ const U8* _Nonnull s, const U8 *_Nonnull e) {
	return utf8_length(s, e);
}
#endif

#ifdef utf8_to_uvchr_buf
SWIFT_NAME(PerlInterpreter.utf8_to_uvchr_buf(self:_:_:_:))
PERL_STATIC_INLINE UV CPerl_utf8_to_uvchr_buf(pTHX_ const U8 *_Nonnull s, const U8 *_Nonnull send, STRLEN *_Nullable retlen) {
	return utf8_to_uvchr_buf(s, send, retlen);
}
#endif

#ifdef utf8n_to_uvchr
SWIFT_NAME(PerlInterpreter.utf8n_to_uvchr(self:_:_:_:_:))
PERL_STATIC_INLINE UV CPerl_utf8n_to_uvchr(pTHX_ const U8 *_Nonnull s, STRLEN curlen, STRLEN *_Nullable retlen, U32 flags) {
	return utf8n_to_uvchr(s, curlen, retlen, flags);
}
#endif

#ifdef vcmp
SWIFT_NAME(PerlInterpreter.vcmp(self:_:_:))
PERL_STATIC_INLINE int CPerl_vcmp(pTHX_ SV *_Nonnull lhv, SV *_Nonnull rhv) {
	return vcmp(lhv, rhv);
}
#endif

#ifdef vcroak
SWIFT_NAME(PerlInterpreter.vcroak(self:_:_:))
PERL_STATIC_INLINE void CPerl_vcroak(pTHX_ const char* _Nullable pat, va_list* _Nullable args) {
	vcroak(pat, args);
}
#endif

#ifdef vmess
SWIFT_NAME(PerlInterpreter.vmess(self:_:_:))
PERL_STATIC_INLINE SV *_Nonnull CPerl_vmess(pTHX_ const char* _Nonnull pat, va_list* _Nullable args) {
	return vmess(pat, args);
}
#endif

#ifdef vwarn
SWIFT_NAME(PerlInterpreter.vwarn(self:_:_:))
PERL_STATIC_INLINE void CPerl_vwarn(pTHX_ const char* _Nonnull pat, va_list* _Nullable args) {
	vwarn(pat, args);
}
#endif

#ifdef warn_sv
SWIFT_NAME(PerlInterpreter.warn_sv(self:_:))
PERL_STATIC_INLINE void CPerl_warn_sv(pTHX_ SV *_Nonnull baseex) {
	warn_sv(baseex);
}
#endif

#ifdef wrap_op_checker
SWIFT_NAME(PerlInterpreter.wrap_op_checker(self:_:_:_:))
PERL_STATIC_INLINE void CPerl_wrap_op_checker(pTHX_ Optype opcode, Perl_check_t _Nonnull new_checker, Perl_check_t _Nonnull *_Nonnull old_checker_p) {
	wrap_op_checker(opcode, new_checker, old_checker_p);
}
#endif

#if !(defined(HAS_SIGACTION) && defined(SA_SIGINFO))
#endif
#if !(defined(NO_MATHOMS))
#ifdef sv_nounlocking
SWIFT_NAME(PerlInterpreter.sv_nounlocking(self:_:))
PERL_STATIC_INLINE void CPerl_sv_nounlocking(pTHX_ SV *_Nullable sv) {
	sv_nounlocking(sv);
}
#endif

#endif
#if !(defined(PERL_GLOBAL_STRUCT_PRIVATE))
#  if defined(PERL_IMPLICIT_CONTEXT)
#  endif
#endif
#if !(defined(WIN32))
#endif
#if !defined(HAS_BZERO) && !defined(HAS_MEMSET)
#endif
#if !defined(HAS_MEMCMP) || !defined(HAS_SANE_MEMCMP)
#endif
#if !defined(HAS_MEMCPY) || (!defined(HAS_MEMMOVE) && !defined(HAS_SAFE_MEMCPY))
#endif
#if !defined(HAS_MEMSET)
#endif
#if !defined(HAS_SIGNBIT)
#endif
#if !defined(HAS_STRLCAT)
#endif
#if !defined(HAS_STRLCPY)
#endif
#if !defined(HAS_TRUNCATE) && !defined(HAS_CHSIZE) && defined(F_FREESP)
#endif
#if !defined(PERL_IMPLICIT_SYS)
#endif
#if !defined(PERL_NO_INLINE_FUNCTIONS)
#ifdef av_top_index
SWIFT_NAME(PerlInterpreter.av_top_index(self:_:))
PERL_STATIC_INLINE SSize_t CPerl_av_top_index(pTHX_ AV *_Nonnull av) {
	return av_top_index(av);
}
#endif

#endif
#if !defined(SPRINTF_RETURNS_STRLEN)
#endif
#if defined(DEBUGGING)
#ifdef pad_setsv
SWIFT_NAME(PerlInterpreter.pad_setsv(self:_:_:))
PERL_STATIC_INLINE void CPerl_pad_setsv(pTHX_ PADOFFSET po, SV* _Nonnull sv) {
	pad_setsv(po, sv);
}
#endif

#  if defined(USE_LOCALE)     && (defined(PERL_IN_LOCALE_C) || defined (PERL_EXT_POSIX))
#  endif
#endif
#if defined(HAS_SIGACTION) && defined(SA_SIGINFO)
#endif
#if defined(HAVE_INTERP_INTERN)
#  if defined(USE_ITHREADS)
#  endif
#endif
#if defined(MYMALLOC)
#endif
#if defined(NO_MATHOMS)
#ifdef sv_nounlocking
SWIFT_NAME(PerlInterpreter.sv_nounlocking(self:_:))
PERL_STATIC_INLINE void CPerl_sv_nounlocking(pTHX_ SV *_Nullable sv) {
	sv_nounlocking(sv);
}
#endif

#endif
#if defined(PERL_DONT_CREATE_GVSV)
#endif
#if defined(PERL_GLOBAL_STRUCT)
#endif
#if defined(PERL_GLOBAL_STRUCT_PRIVATE)
#  if defined(PERL_IMPLICIT_CONTEXT)
#  endif
#endif
#if defined(PERL_IMPLICIT_CONTEXT)
#endif
#if defined(PERL_IMPLICIT_SYS)
#  if defined(USE_ITHREADS)
#  endif
#endif
#if defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_PERL_C) || defined(PERL_IN_UTF8_C)
#endif
#if defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_REGEXEC_C)
#endif
#if defined(PERL_OP_PARENT)
#endif
#if defined(UNLINK_ALL_VERSIONS)
#endif
#if defined(USE_C_BACKTRACE)
#ifdef dump_c_backtrace
SWIFT_NAME(PerlInterpreter.dump_c_backtrace(self:_:_:_:))
PERL_STATIC_INLINE bool CPerl_dump_c_backtrace(pTHX_ PerlIO* _Nonnull fp, int max_depth, int skip) {
	return dump_c_backtrace(fp, max_depth, skip);
}
#endif

#endif
#if defined(USE_ITHREADS)
#endif
#if defined(USE_LOCALE)     && (defined(PERL_IN_LOCALE_C) || defined (PERL_EXT_POSIX))
#endif
#if defined(USE_LOCALE_COLLATE)
#endif
#if defined(USE_PERLIO)
#endif
#if defined(USE_QUADMATH)
#ifdef quadmath_format_needed
SWIFT_NAME(quadmath_format_needed(_:))
PERL_STATIC_INLINE bool CPerl_quadmath_format_needed(const char* _Nonnull format) {
	return quadmath_format_needed(format);
}
#endif

#endif
#if defined(WIN32)
#endif
#if defined(WIN32) || defined(__SYMBIAN32__) || defined(VMS)
#endif
