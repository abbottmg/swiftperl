import CPerl

extension PerlSub {
	public enum VoidContext {
		case void
		var rawValue: Int32 { return G_VOID }
	}

	public enum ScalarContext {
		case scalar
		var rawValue: Int32 { return G_SCALAR }
	}

	public enum ArrayContext {
		case array
		var rawValue: Int32 { return G_ARRAY }
	}
}

extension PerlInterpreter {
	func unsafeCall<C : Collection>(sv: UnsafeSvPointer, args: C, flags: Int32) throws -> UnsafeStackBufferPointer
		where C.Iterator.Element == UnsafeSvPointer {
		let stack = UnsafeCallStack(perl: self, args: args)
		let count = pointee.call_sv(sv, G_EVAL|flags)
		let result = stack.popReturned(count: Int(count))
		if Bool(error) {
			throw PerlError.died(try PerlScalar(copy: error))
		}
		return result
	}

	func unsafeEval(sv: UnsafeSvPointer, flags: Int32) throws -> UnsafeStackBufferPointer {
		let count = pointee.eval_sv(sv, flags)
		let result = popFromStack(count: Int(count))
		if Bool(error) {
			throw PerlError.died(try PerlScalar(copy: error))
		}
		return result
	}

	func enterScope() {
		pointee.ENTER()
		pointee.SAVETMPS()
	}

	func leaveScope() {
		pointee.FREETMPS()
		pointee.LEAVE()
	}
}

%{
	import re

	allReturnVariants = ["Void", "R", "R?", "(R0, R1)", "PerlSub.ReturnValues"]

	def contextFlags(r):
		if r == "Void":
			return "G_VOID"
		elif ',' in r or r == "PerlSub.ReturnValues":
			return "G_ARRAY"
		else:
			return "G_SCALAR"
	
	def generic(r):
		return ", ".join(map(lambda r: r + " : PerlScalarConvertible", re.findall("\\bR\\d*\\b", r)))
	
	def fqGeneric(r):
		g = generic(r)
		return "" if g == "" else "<" + g + ">"
	
	def moreGeneric(r):
		g = generic(r)
		return "" if g == "" else ", " + g
	
	def result(ret):
		if ret == "PerlSub.ReturnValues":
			return "PerlSub.ReturnValues(svResult, perl: self)"
		else:
			return "try " + re.sub("(R(\\d*)\\??)", lambda m: m.group(1) + "(_fromUnsafeSvContextCopy: UnsafeSvContext(sv: svResult[" + (m.group(2) or "0") + "], perl: self))", ret)

	contextVariants = ["void", "scalar", "array"]

	dispatchVariants = ["sub", "method"]

	argsVariants = ["args: [PerlScalarConvertible?]", "_ args: PerlScalarConvertible?..."]

	def returnVariants(context):
		if context == "void":
			return ["Void"]
		elif context == "scalar":
			return ["R", "R?"]
		else:
			return ["R", "R?", "(R0, R1)", "PerlSub.ReturnValues"]

	def contextType(context, ret):
		c = "PerlSub." + context.title() + "Context"
		if context == "void" and ret == "Void" or context == "scalar" and ret[0] == "R" or context == "array" and "," in ret:
			c += " = ." + context
		return c

	# swift 3.1 does not support partial specialization
	def subVariants(dispatch):
		if dispatch == "method":
			return ["String", "PerlScalar"]
		else:
			return ["String", "PerlScalar", "PerlSub"]
}%

extension PerlInterpreter {
% for ret in allReturnVariants:
	func call${fqGeneric(ret)}(sv: UnsafeSvPointer, args: [PerlScalarConvertible?], flags: Int32 = ${contextFlags(ret)}) throws -> ${ret} {
		let svArgs: [UnsafeSvPointer] = args.map { $0?._toUnsafeSvPointer(perl: self) ?? pointee.newSV(0) }
%   if ret == "Void":
		_ = try unsafeCall(sv: sv, args: svArgs, flags: flags)
%   else:
		let svResult = try unsafeCall(sv: sv, args: svArgs, flags: flags)
		return ${result(ret)}
%   end
	}
% end
}

extension PerlInterpreter {
% for dispatch in dispatchVariants:
%   for context in contextVariants:
%     for ret in returnVariants(context):
%       for args in argsVariants:
%         for subType in subVariants(dispatch):
	/// Calls the Perl ${"method" if dispatch == "method" else "subroutine"}.
	///
	/// The arguments of the call will be automagically converted to mortalized Perl scalar
	/// values with the lifetime of the scope of this call. The similar thing will
	/// happen to the Perl return values: they will be destroyed before the call
	/// returns (but after conversion to Swift values was done).
	///
	/// - Parameter ${dispatch}: The name of the ${"method" if dispatch == "method" else "subroutine"}.
	/// - Parameter args: Arguments to pass to the Perl ${dispatch}.
	/// - Parameter context: Context of the call.
	/// - Returns: Values returned by the Perl ${dispatch} converted to requested Swift types.
	public func call${fqGeneric(ret)}(${dispatch}: ${subType}, ${args}, context: ${contextType(context, ret)}) throws -> ${ret} {
		enterScope()
		defer { leaveScope() }
%           if subType == "String":
		return try call(sv: newSV(${dispatch}, mortal: true), args: args, flags: ${"G_METHOD|" if dispatch == "method" else ""}context.rawValue)
%           else:
		return try ${dispatch}.withUnsafeSvContext { try call(sv: $0.sv, args: args, flags: ${"G_METHOD|" if dispatch == "method" else ""}context.rawValue) }
%           end
	}
%         end
%       end
%     end
%   end
% end
}

extension PerlSub {
% for context in contextVariants:
%   for ret in returnVariants(context):
%     for args in argsVariants:
%       for subType in ("String", "PerlScalar"):
	/// Calls the Perl subroutine by its name.
	///
	/// The arguments of the call will be automagically converted to mortalized Perl scalar
	/// values with the lifetime of the scope of this call. The similar thing will
	/// happen to the Perl return values: they will be destroyed before the call
	/// returns (but after conversion to Swift values was done).
	///
	/// - Parameter name: The name of the subroutine.
	/// - Parameter args: Arguments to pass to the Perl subroutine.
	/// - Parameter context: Context of the call.
	/// - Returns: Values returned by the Perl subroutine converted to requested Swift types.
%         if subType == "String":
	public static func call${fqGeneric(ret)}(_ name: ${subType}, ${args}, context: ${contextType(context, ret)}, perl: PerlInterpreter = .current) throws -> ${ret} {
		return try perl.call(sub: name, args: args, context: context)
	}
%         else:
	public static func call${fqGeneric(ret)}(_ name: ${subType}, ${args}, context: ${contextType(context, ret)}) throws -> ${ret} {
		return try name.withUnsafeSvContext { try $0.perl.call(sub: name, args: args, context: context) }
	}
%         end
%       end
%     end
%   end
% end

% for context in contextVariants:
%   for ret in returnVariants(context):
%     for args in argsVariants:
	/// Calls the underlain Perl subroutine.
	///
	/// The arguments of the call will be automagically converted to mortalized Perl scalar
	/// values with the lifetime of the scope of this call. The similar thing will
	/// happen to the Perl return values: they will be destroyed before the call
	/// returns (but after conversion to Swift values was done).
	///
	/// - Parameter args: Arguments to pass to the Perl subroutine.
	/// - Parameter context: Context of the call.
	/// - Returns: Values returned by the Perl subroutine converted to requested Swift types.
	public func call${fqGeneric(ret)}(${args}, context: ${contextType(context, ret)}) throws -> ${ret} {
		return try withUnsafeSvContext {
			let perl = $0.perl
			perl.enterScope()
			defer { perl.leaveScope() }
			return try perl.call(sv: $0.sv, args: args, flags: context.rawValue)
		}
	}
%     end
%   end
% end
}

extension PerlObject {
% for context in contextVariants:
%   for ret in returnVariants(context):
%     for args in argsVariants:
%       for subType in subVariants("method"):
	/// Calls the Perl method on the current instance.
	///
	/// The arguments of the call will be automagically converted to mortalized Perl scalar
	/// values with the lifetime of the scope of this call. The similar thing will
	/// happen to the Perl return values: they will be destroyed before the call
	/// returns (but after conversion to Swift values was done).
	///
	/// - Parameter method: The name of the method to call.
	/// - Parameter args: Arguments to pass to the Perl method.
	/// - Parameter context: Context of the call.
	/// - Returns: Values returned by the Perl method converted to requested Swift types.
	public func call${fqGeneric(ret)}(method: ${subType}, ${args}, context: ${contextType(context, ret)}) throws -> ${ret} {
		return try unsafeSvContext.perl.call(method: method, args: [self] + args, context: context)
	}
%       end
%     end
%   end
% end
}

extension PerlNamedClass {
% for context in contextVariants:
%   for ret in returnVariants(context):
%     for args in argsVariants:
%       for subType in subVariants("method"):
	/// Calls the Perl method specified by `perlClassName` attribute on the current class.
	///
	/// The arguments of the call will be automagically converted to mortalized Perl scalar
	/// values with the lifetime of the scope of this call. The similar thing will
	/// happen to the Perl return values: they will be destroyed before the call
	/// returns (but after conversion to Swift values was done).
	///
	/// - Parameter method: The name of the method to call.
	/// - Parameter args: Arguments to pass to the Perl method.
	/// - Parameter context: Context of the call.
	/// - Returns: Values returned by the Perl method converted to requested Swift types.
%         if subType == "String":
	public static func call${fqGeneric(ret)}(method: ${subType}, ${args}, context: ${contextType(context, ret)}, perl: PerlInterpreter = .current) throws -> ${ret} {
		return try perl.call(method: method, args: [perlClassName] + args, context: context)
	}
%         else:
	public static func call${fqGeneric(ret)}(method: ${subType}, ${args}, context: ${contextType(context, ret)}) throws -> ${ret} {
		return try method.withUnsafeSvContext { try $0.perl.call(method: method, args: [perlClassName] + args, context: context) }
	}
%         end
%       end
%     end
%   end
% end
}

extension PerlInterpreter {
% for ret in allReturnVariants:
	func eval${fqGeneric(ret)}(sv: UnsafeSvPointer, flags: Int32 = ${contextFlags(ret)}) throws -> ${ret} {
%   if ret == "Void":
		_ = try unsafeEval(sv: sv, flags: flags)
%   else:
		let svResult = try unsafeEval(sv: sv, flags: flags)
		return ${result(ret)}
%   end
	}
% end

% for context in contextVariants:
%   for ret in returnVariants(context):
	/// Tells Perl to "eval" the string.
	public func eval${fqGeneric(ret)}(_ string: String, context: ${contextType(context, ret)}) throws -> ${ret} {
		enterScope()
		defer { leaveScope() }
		return try eval(sv: newSV(string, mortal: true), flags: context.rawValue)
	}

	/// Tells Perl to "eval" the string.
	public func eval${fqGeneric(ret)}(_ string: PerlScalar, context: ${contextType(context, ret)}) throws -> ${ret} {
		enterScope()
		defer { leaveScope() }
		return try string.withUnsafeSvContext { try eval(sv: $0.sv, flags: context.rawValue) }
	}
%   end
% end
}
