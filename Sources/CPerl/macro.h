// !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
// This file is built by update-headers from data in macro.in.
// Any changes made here will be lost!
//
// Edit macro.in and run update-headers to effect changes.

// Interpreter

/// Provides system-specific tune up of the C runtime environment necessary to
/// run Perl interpreters.  This should be called only once, before creating
/// any Perl interpreters.
SWIFT_NAME(PERL_SYS_INIT3(_:_:_:))
PERL_STATIC_INLINE void CPerlMacro_PERL_SYS_INIT3(int *_Nonnull argc, char *_Nullable *_Nonnull *_Nonnull argv, char *_Nullable *_Nonnull *_Nonnull env) {
	PERL_SYS_INIT3(argc, argv, env);
}

/// Provides system-specific clean up of the C runtime environment after
/// running Perl interpreters.  This should be called only once, after
/// freeing any remaining Perl interpreters.
SWIFT_NAME(PERL_SYS_TERM())
PERL_STATIC_INLINE void CPerlMacro_PERL_SYS_TERM(void) {
	PERL_SYS_TERM();
}

SWIFT_NAME(PERL_GET_INTERP())
PERL_STATIC_INLINE PerlInterpreter *_Nonnull CPerlMacro_PERL_GET_INTERP(void) {
	return PERL_GET_INTERP;
}

SWIFT_NAME(PERL_SET_INTERP(_:))
PERL_STATIC_INLINE void CPerlMacro_PERL_SET_INTERP(PerlInterpreter *_Nonnull p) {
	PERL_SET_INTERP(p);
}

SWIFT_NAME(PERL_GET_THX())
PERL_STATIC_INLINE PerlInterpreter *_Nonnull CPerlMacro_PERL_GET_THX(void) {
	return PERL_GET_THX;
}

SWIFT_NAME(PERL_SET_THX(_:))
PERL_STATIC_INLINE void CPerlMacro_PERL_SET_THX(PerlInterpreter *_Nonnull p) {
	PERL_SET_THX(p);
}

SWIFT_NAME(getter:PerlInterpreter.ERRSV(self:))
PERL_STATIC_INLINE SV *_Nonnull CPerlMacro_ERRSV(pTHX) {
	return ERRSV;
}

/// Returns a true SV if @c b is a true value, or a false SV if @c b is 0.
///
/// See also @c PL_sv_yes and @c PL_sv_no.
SWIFT_NAME(PerlInterpreter.boolSV(self:_:))
PERL_STATIC_INLINE SV *_Nonnull CPerlMacro_boolSV(pTHX_ bool b) {
	return boolSV(b);
}


// Stack Manipulation Macros

SWIFT_NAME(getter:PerlInterpreter.PL_stack_base(self:))
PERL_STATIC_INLINE SV *_Nonnull *_Nonnull CPerlMacro_PL_stack_base(pTHX) {
	return PL_stack_base;
}

SWIFT_NAME(getter:PerlInterpreter.PL_stack_sp(self:))
PERL_STATIC_INLINE SV *_Nonnull *_Nonnull CPerlMacro_PL_stack_sp(pTHX) {
	return PL_stack_sp;
}

SWIFT_NAME(setter:PerlInterpreter.PL_stack_sp(self:_:))
PERL_STATIC_INLINE void CPerlMacro_PL_stack_sp_set(pTHX_ SV *_Nonnull *_Nonnull sp) {
	PL_stack_sp = sp;
}

/// Used to extend the argument stack for an XSUB's return values.  Once
/// used, guarantees that there is room for at least @c nitems to be pushed
/// onto the stack.
SWIFT_NAME(PerlInterpreter.EXTEND(self:_:_:))
PERL_STATIC_INLINE SV *_Nonnull *_Nonnull CPerlMacro_EXTEND(pTHX_ SV *_Nonnull *_Nonnull sp, SSize_t nitems) {
	EXTEND(sp, nitems);
	return sp;
}

/// Opening bracket for arguments on a callback.  See @c PUTBACK and
/// perlcall.
SWIFT_NAME(PerlInterpreter.PUSHMARK(self:_:))
PERL_STATIC_INLINE void CPerlMacro_PUSHMARK(pTHX_ SV *_Nonnull *_Nonnull sp) {
	PUSHMARK(sp);
}

SWIFT_NAME(PerlInterpreter.POPMARK(self:))
PERL_STATIC_INLINE I32 CPerlMacro_POPMARK(pTHX) {
	return POPMARK;
}

SWIFT_NAME(getter:PerlInterpreter.TOPMARK(self:))
PERL_STATIC_INLINE I32 CPerlMacro_TOPMARK(pTHX) {
	return TOPMARK;
}


// Callback Functions

/// Opening bracket for temporaries on a callback.  See @c FREETMPS and
/// perlcall.
SWIFT_NAME(PerlInterpreter.SAVETMPS(self:))
PERL_STATIC_INLINE void CPerlMacro_SAVETMPS(pTHX) {
	SAVETMPS;
}

/// Closing bracket for temporaries on a callback.  See @c SAVETMPS and
/// perlcall.
SWIFT_NAME(PerlInterpreter.FREETMPS(self:))
PERL_STATIC_INLINE void CPerlMacro_FREETMPS(pTHX) {
	FREETMPS;
}

/// Opening bracket on a callback.  See @c LEAVE and perlcall.
SWIFT_NAME(PerlInterpreter.ENTER(self:))
PERL_STATIC_INLINE void CPerlMacro_ENTER(pTHX) {
	ENTER;
}

/// Closing bracket on a callback.  See @c ENTER and perlcall.
SWIFT_NAME(PerlInterpreter.LEAVE(self:))
PERL_STATIC_INLINE void CPerlMacro_LEAVE(pTHX) {
	LEAVE;
}


// SV Reference Counting

/// Returns the value of the object's reference count. Exposed
/// to perl code via Internals::SvREFCNT().
SWIFT_NAME(SvREFCNT(_:))
PERL_STATIC_INLINE U32 CPerlMacro_SvREFCNT(SV *_Nonnull sv) {
	return SvREFCNT(sv);
}

/// Increments the reference count of the given SV, returning the SV.
///
/// All of the following @c SvREFCNT_inc* macros are optimized versions of
/// @c SvREFCNT_inc, and can be replaced with @c SvREFCNT_inc.
SWIFT_NAME(SvREFCNT_inc(_:))
PERL_STATIC_INLINE SV *_Nullable CPerlMacro_SvREFCNT_inc(SV *_Nullable sv) {
	return SvREFCNT_inc(sv);
}

/// Same as @c SvREFCNT_inc, but can only be used if you know @c sv
/// is not @c NULL.  Since we don't have to check the NULLness, it's faster
/// and smaller.
SWIFT_NAME(SvREFCNT_inc_NN(_:))
PERL_STATIC_INLINE SV *_Nonnull CPerlMacro_SvREFCNT_inc_NN(SV *_Nonnull sv) {
	return SvREFCNT_inc_NN(sv);
}

/// Decrements the reference count of the given SV.  @c sv may be @c NULL.
SWIFT_NAME(PerlInterpreter.SvREFCNT_dec(self:_:))
PERL_STATIC_INLINE void CPerlMacro_SvREFCNT_dec(pTHX_ SV *_Nullable sv) {
	SvREFCNT_dec(sv);
}

/// Same as @c SvREFCNT_dec, but can only be used if you know @c sv
/// is not @c NULL.  Since we don't have to check the NULLness, it's faster
/// and smaller.
SWIFT_NAME(PerlInterpreter.SvREFCNT_dec_NN(self:_:))
PERL_STATIC_INLINE void CPerlMacro_SvREFCNT_dec_NN(pTHX_ SV *_Nonnull sv) {
#ifdef SvREFCNT_dec_NN
	return SvREFCNT_dec_NN(sv);
#else
	return SvREFCNT_dec(sv);
#endif
}


// SV

/// Creates an RV wrapper for an SV.  The reference count for the original SV is
/// incremented.
SWIFT_NAME(PerlInterpreter.newRV_inc(self:_:))
PERL_STATIC_INLINE SV *_Nonnull CPerlMacro_newRV_inc(pTHX_ SV *_Nonnull const sv) {
	return newRV_inc(sv);
}

/// Returns the type of the SV.  See @c svtype.
SWIFT_NAME(SvTYPE(_:))
PERL_STATIC_INLINE svtype CPerlMacro_SvTYPE(SV *_Nonnull sv) {
	return SvTYPE(sv);
}

/// Returns a U32 value indicating whether the value is defined.  This is
/// only meaningful for scalars.
SWIFT_NAME(SvOK(_:))
PERL_STATIC_INLINE bool CPerlMacro_SvOK(SV *_Nonnull sv) {
	return SvOK(sv);
}

/// Returns a U32 value indicating whether the SV contains an integer.
SWIFT_NAME(SvIOK(_:))
PERL_STATIC_INLINE bool CPerlMacro_SvIOK(SV *_Nonnull sv) {
	return SvIOK(sv);
}

/// Returns a boolean indicating whether the SV contains an integer that must be
/// interpreted as unsigned.  A non-negative integer whose value is within the
/// range of both an IV and a UV may be be flagged as either @c SvUOK or @c SVIOK.
SWIFT_NAME(SvIOK_UV(_:))
PERL_STATIC_INLINE bool CPerlMacro_SvIOK_UV(SV *_Nonnull sv) {
	return SvIOK_UV(sv);
}

/// Returns a boolean indicating whether the SV contains a signed integer.
SWIFT_NAME(SvIOK_notUV(_:))
PERL_STATIC_INLINE bool CPerlMacro_SvIOK_notUV(SV *_Nonnull sv) {
	return SvIOK_notUV(sv);
}

SWIFT_NAME(SvIsUV(_:))
PERL_STATIC_INLINE bool CPerlMacro_SvIsUV(SV *_Nonnull sv) {
	return SvIsUV(sv);
}

/// Returns a U32 value indicating whether the SV contains a double.
SWIFT_NAME(SvNOK(_:))
PERL_STATIC_INLINE bool CPerlMacro_SvNOK(SV *_Nonnull sv) {
	return SvNOK(sv);
}

/// Returns a U32 value indicating whether the SV contains a number, integer or
/// double.
SWIFT_NAME(SvNIOK(_:))
PERL_STATIC_INLINE bool CPerlMacro_SvNIOK(SV *_Nonnull sv) {
	return SvNIOK(sv);
}

/// Tests if the SV is an RV.
SWIFT_NAME(SvROK(_:))
PERL_STATIC_INLINE bool CPerlMacro_SvROK(SV *_Nonnull sv) {
	return SvROK(sv);
}

/// Returns a U32 value indicating whether the SV contains a character
/// string.
SWIFT_NAME(SvPOK(_:))
PERL_STATIC_INLINE bool CPerlMacro_SvPOK(SV *_Nonnull sv) {
	return SvPOK(sv);
}

/// Returns a U32 value indicating the UTF-8 status of an SV.  If things are set-up
/// properly, this indicates whether or not the SV contains UTF-8 encoded data.
/// You should use this @i after a call to @c SvPV() or one of its variants, in
/// case any call to string overloading updates the internal flag.
///
/// If you want to take into account the bytes pragma, use @c DO_UTF8
/// instead.
SWIFT_NAME(SvUTF8(_:))
PERL_STATIC_INLINE bool CPerlMacro_SvUTF8(SV *_Nonnull sv) {
	return SvUTF8(sv);
}

/// Turn on the UTF-8 status of an SV (the data is not changed, just the flag).
/// Do not use frivolously.
SWIFT_NAME(SvUTF8_on(_:))
PERL_STATIC_INLINE void CPerlMacro_SvUTF8_on(SV *_Nonnull sv) {
	SvUTF8_on(sv);
}

/// Unsets the UTF-8 status of an SV (the data is not changed, just the flag).
/// Do not use frivolously.
SWIFT_NAME(SvUTF8_off(_:))
PERL_STATIC_INLINE void CPerlMacro_SvUTF8_off(SV *_Nonnull sv) {
	SvUTF8_off(sv);
}

/// Dereferences an RV to return the SV.
SWIFT_NAME(SvRV(_:))
PERL_STATIC_INLINE SV *_Nullable CPerlMacro_SvRV(SV *_Nonnull sv) {
	return SvRV(sv);
}

/// Returns a boolean indicating whether Perl would evaluate the SV as true or
/// false.  See @c SvOK for a defined/undefined test.  Handles 'get' magic
/// unless the scalar is already @c SvPOK, @c SvIOK or @c SvNOK (the public, not the
/// private flags).
SWIFT_NAME(PerlInterpreter.SvTRUE(self:_:))
PERL_STATIC_INLINE bool CPerlMacro_SvTRUE(pTHX_ SV *_Nullable sv) {
	return SvTRUE(sv);
}

/// Coerces the given SV to IV and returns it.  The returned value in many
/// circumstances will get stored in @c sv's IV slot, but not in all cases.  (Use
/// @c sv_setiv to make sure it does).
///
/// See @c SvIVx for a version which guarantees to evaluate @c sv only once.
SWIFT_NAME(PerlInterpreter.SvIV(self:_:))
PERL_STATIC_INLINE IV CPerlMacro_SvIV(pTHX_ SV *_Nonnull sv) {
	return SvIV(sv);
}

/// Coerces the given SV to UV and returns it.  The returned value in many
/// circumstances will get stored in @c sv's UV slot, but not in all cases.  (Use
/// @c sv_setuv to make sure it does).
///
/// See @c SvUVx for a version which guarantees to evaluate @c sv only once.
SWIFT_NAME(PerlInterpreter.SvUV(self:_:))
PERL_STATIC_INLINE UV CPerlMacro_SvUV(pTHX_ SV *_Nonnull sv) {
	return SvUV(sv);
}

/// Coerces the given SV to NV and returns it.  The returned value in many
/// circumstances will get stored in @c sv's NV slot, but not in all cases.  (Use
/// @c sv_setnv to make sure it does).
///
/// See @c SvNVx for a version which guarantees to evaluate @c sv only once.
SWIFT_NAME(PerlInterpreter.SvNV(self:_:))
PERL_STATIC_INLINE NV CPerlMacro_SvNV(pTHX_ SV *_Nonnull sv) {
	return SvNV(sv);
}

/// Returns a pointer to the string in the SV, or a stringified form of
/// the SV if the SV does not contain a string.  The SV may cache the
/// stringified version becoming @c SvPOK.  Handles 'get' magic.  The
/// @c len variable will be set to the length of the string (this is a macro, so
/// don't use @c &len).  See also @c SvPVx for a version which guarantees to
/// evaluate @c sv only once.
///
/// Note that there is no guarantee that the return value of @c SvPV() is
/// equal to @c SvPVX(sv), or that @c SvPVX(sv) contains valid data, or that
/// successive calls to @c SvPV(sv) will return the same pointer value each
/// time.  This is due to the way that things like overloading and
/// Copy-On-Write are handled.  In these cases, the return value may point to
/// a temporary buffer or similar.  If you absolutely need the @c SvPVX field to
/// be valid (for example, if you intend to write to it), then see
/// @c SvPV_force.
SWIFT_NAME(PerlInterpreter.SvPV(self:_:_:))
PERL_STATIC_INLINE char *_Nullable CPerlMacro_SvPV(pTHX_ SV *_Nonnull sv, STRLEN *_Nonnull len) {
	return SvPV(sv, *len);
}


// AV

// HV

/// Returns the key slot of the hash entry as a @c char* value, doing any
/// necessary dereferencing of possibly @c SV* keys.  The length of the string
/// is placed in @c len (this is a macro, so do @i not use @c &len).  If you do
/// not care about what the length of the key is, you may use the global
/// variable @c PL_na, though this is rather less efficient than using a local
/// variable.  Remember though, that hash keys in perl are free to contain
/// embedded nulls, so using @c strlen() or similar is not a good way to find
/// the length of hash keys.  This is very similar to the @c SvPV() macro
/// described elsewhere in this document.  See also @c HeUTF8.
///
/// If you are using @c HePV to get values to pass to @c newSVpvn() to create a
/// new SV, you should consider using @c newSVhek(HeKEY_hek(he)) as it is more
/// efficient.
SWIFT_NAME(PerlInterpreter.HePV(self:_:_:))
PERL_STATIC_INLINE char *_Nonnull CPerlMacro_HePV(pTHX_ HE *_Nonnull he, STRLEN *_Nonnull len) {
	return HePV(he, *len);
}

/// Returns the value slot (type @c SV*)
/// stored in the hash entry.  Can be assigned
/// to.
///
/// @code
/// SV *foo= HeVAL(hv);
/// HeVAL(hv)= sv;
/// @endcode
///
SWIFT_NAME(HeVAL(_:))
PERL_STATIC_INLINE SV *_Nonnull CPerlMacro_HeVAL(HE *_Nonnull he) {
	return HeVAL(he);
}

/// Returns the package name of a stash, or @c NULL if @c stash isn't a stash.
/// See @c SvSTASH, @c CvSTASH.
SWIFT_NAME(HvNAME(_:))
PERL_STATIC_INLINE char *_Nullable CPerlMacro_HvNAME(HV *_Nonnull stash) {
	return HvNAME(stash);
}


// CV

SWIFT_NAME(CvXSUBANY(_:))
PERL_STATIC_INLINE ANY *_Nonnull CPerlMacro_CvXSUBANY(CV *_Nonnull cv) {
	return &CvXSUBANY(cv);
}

SWIFT_NAME(PerlInterpreter.CvGV(self:_:))
PERL_STATIC_INLINE GV *_Nullable CPerlMacro_CvGV(pTHX_ CV *_Nonnull cv) {
	return CvGV(cv);
}

SWIFT_NAME(CvFILE(_:))
PERL_STATIC_INLINE char *_Nullable CPerlMacro_CvFILE(CV *_Nonnull cv) {
	return CvFILE(cv);
}


// GV

SWIFT_NAME(GvSTASH(_:))
PERL_STATIC_INLINE HV *_Nullable CPerlMacro_GvSTASH(GV *_Nonnull gv) {
	return GvSTASH(gv);
}

SWIFT_NAME(GvNAME(_:))
PERL_STATIC_INLINE char *_Nonnull CPerlMacro_GvNAME(GV *_Nonnull gv) {
	return GvNAME(gv);
}

