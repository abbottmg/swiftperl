import CPerl

/// Provides a safe wrapper for Perl subroutine (`CV`).
/// Performs reference counting on initialization and deinitialization.
///
/// ## Cheat Sheet
///
/// ### Creation of an anonymous subroutine
///
/// ```perl
/// my $summer = sub {
///		my ($lv, $rv) = @_;
///		return $lv + $rv;
/// }
/// ```
///
/// ```swift
/// let summer = PerlSub {
///		(lv: Int, rv: Int) -> Int in
///		return lv + rv
/// }
/// ```
///
/// In fact, these examples are not fully equal. The Perl version returns a SV pointing to a CV,
/// whereas the Swift version returns just a CV.
///
/// ### Creation of a named subroutine
///
/// ```perl
/// sub strlen {
///		return length $_[0];
/// }
/// ```
///
/// ```swift
///	PerlSub(name: "strlen") { (s: String) in
///		return s.characters.count
/// }
/// ```
///
/// ### Calling a subroutine
///
/// ```perl
/// my $sum = $summer->(10, 20);
/// ```
///
/// ```swift
/// let sum = summer.call(10, 20)
/// ```
public final class PerlSub : PerlValue {
	convenience init(noinc cvc: UnsafeCvContext) {
		self.init(noincUnchecked: UnsafeSvContext(rebind: cvc))
	}

	convenience init(inc cvc: UnsafeCvContext) {
		self.init(incUnchecked: UnsafeSvContext(rebind: cvc))
	}

	required convenience init(noinc svc: UnsafeSvContext) throws {
		guard svc.type == SVt_PVCV else {
			throw PerlError.unexpectedValueType(fromUnsafeSvContext(noinc: svc), want: PerlSub.self)
		}
		self.init(noincUnchecked: svc)
	}

	@discardableResult
	convenience init(name: String?, perl: PerlInterpreter = .current, file: StaticString = #file, body: @escaping CvBody) {
		self.init(noinc: UnsafeCvContext.new(name: name, file: file, body: body, perl: perl))
		if name != nil {
			unsafeSvContext.refcntInc()
			_fixLifetime(self)
		}
	}

	/// Short form of `init(dereferencing:)`.
	public convenience init(_ ref: PerlScalar) throws {
		try self.init(dereferencing: ref)
	}

	/// Returns the specified Perl subroutine with the given name.
	/// If the subroutine does not exist then `nil` is returned.
	public convenience init?(get name: String, perl: PerlInterpreter = .current) {
		guard let cv = perl.getCV(name) else { return nil }
		self.init(inc: UnsafeCvContext(cv: cv, perl: perl))
	}

	func withUnsafeCvContext<R>(_ body: (UnsafeCvContext) throws -> R) rethrows -> R {
		defer { _fixLifetime(self) }
		return try unsafeSvContext.sv.withMemoryRebound(to: CV.self, capacity: 1) {
			return try body(UnsafeCvContext(cv: $0, perl: unsafeSvContext.perl))
		}
	}

	var file: String? {
		return withUnsafeCvContext { $0.file }
	}

	/// A textual representation of the CV, suitable for debugging.
	public override var debugDescription: String {
		let deparse: PerlObject = try! unsafeSvContext.perl.eval("use B::Deparse; B::Deparse->new('-sCi0')")
		var text: String = try! deparse.call(method: "coderef2text", self)
		text = text.split { $0 == "\n" } .map(String.init).joined(separator: " ")
		if let file = file {
			text += " at \(file)"
		}
		return "PerlSub(\(text))"
	}

% for Self in ("Args", "ReturnValues"):
%   rc = "copy" if Self == "Args" else "inc"
%   if Self == "Args":
	/// Arguments passed to a subroutine.
	public struct Args : RandomAccessCollection {
		let unsafeArgs: UnsafeStackBufferPointer
		let perl: PerlInterpreter

		init(_ args: UnsafeStackBufferPointer, perl: PerlInterpreter) {
			unsafeArgs = args
			self.perl = perl
		}
%   else:
	/// A copy of values returned from a Perl subroutine.
	public final class ReturnValues : RandomAccessCollection {
		let unsafeArgs: [UnsafeSvPointer]
		let perl: PerlInterpreter

		init(_ args: UnsafeStackBufferPointer, perl: PerlInterpreter) {
			unsafeArgs = args.map {
				// Copy SV: not `newSVsv` to enable TEMP buffers stealing
				let sv = perl.pointee.newSV(0)
				perl.pointee.sv_setsv(sv, $0)
				return sv
			}
			self.perl = perl
		}

		deinit {
			for sv in unsafeArgs {
				perl.pointee.SvREFCNT_dec_NN(sv)
			}
		}
%   end

		/// Fetches the argument at the specified position.
		///
		/// - Parameter index: The position of the argument to fetch.
		/// - Throws: If the argument not exists, is undefined or not
		///   convertible to the desired type.
		///
		/// - Complexity: O(1).
		public func get<T : PerlScalarConvertible>(_ index: Int) throws -> T {
			guard index >= startIndex && index < endIndex else {
				throw PerlError.noArgumentOnStack(at: index)
			}
			return try T(_fromUnsafeSvContext${rc.title()}: UnsafeSvContext(sv: unsafeArgs[index], perl: perl))
		}

		/// Fetches the argument at the specified position.
		///
		/// - Parameter index: The position of the argument to fetch.
		/// - Returns: `nil` if the argument not exists or is undefined.
		/// - Throws: If the argument is not convertible to the desired type.
		///
		/// - Complexity: O(1).
		public func get<T : PerlScalarConvertible>(_ index: Int) throws -> T? {
			guard index >= startIndex && index < endIndex else { return nil }
			return try T?(_fromUnsafeSvContext${rc.title()}: UnsafeSvContext(sv: unsafeArgs[index], perl: perl))
		}

		/// The position of the first argument.
		///
		/// If the arguments are empty, `startIndex` is equal to `endIndex`.
		public var startIndex: Int { return unsafeArgs.startIndex }

		/// The arguments' "past the end" position---that is, the position one greater
		/// than the last valid subscript argument.
		///
		/// If the arguments are empty, `endIndex` is equal to `startIndex`.
		public var endIndex: Int { return unsafeArgs.endIndex }

		/// Accesses the argument at the specified position.
		///
		/// - Parameter index: The position of the argument to access.
		///
		/// - Complexity: O(1).
		public subscript(index: Int) -> PerlScalar {
			guard index >= startIndex && index < endIndex else { return PerlScalar(perl: perl) }
			return PerlScalar(${rc}Unchecked: UnsafeSvContext(sv: unsafeArgs[index], perl: perl))
		}
	}
% end
}

%{
	def generic(count, tail):
		list = map(lambda n: "P" + str(n) + ": PerlScalarConvertible", range(0, count))
		if tail != "fixed":
			list.append("T: PerlScalarConvertible")
		g = ", ".join(list)
		return "" if g == "" else "<" + g + ">"

	def paramsRange(tail):
		if tail == "fixed":
			return range(0, 4)
		else:
			return range(0, 3)

	def paramsVariants(count, tail, method):
		vars = []
		for optmask in range(0, 1 << count):
			if method and optmask & 1 != 0:
				continue
			params = map(lambda n: "P" + str(n) + ("?" if (1 << n) & optmask != 0 else ""), range(0, count))
			if tail == "array":
				params.append("[T]")
			elif tail == "hash":
				params.append("[String: T]")
			vars.append("(" + ", ".join(params) + ")")
		return vars

	def result(count):
		list = map(lambda n: "PerlScalarConvertible?", range(0, count))
		return "(" + ", ".join(list) + ")"

	def bodyArgs(count, tail):
		list = map(lambda n: "stack.fetch(at: " + str(n) + ")", range(0, p))
		if tail != "fixed":
			list.append("stack.fetchTail(startingAt: " + str(p) + ")")
		return ", ".join(list)
}%

extension PerlSub {
% for tail in ("fixed", "array", "hash"):
%   for p in paramsRange(tail):
%     args = bodyArgs(p, tail)
%     for r in range(0, 3):
%       for params in paramsVariants(p, tail, False):

	/// Creates a new Perl XSUB.
	///
	/// A body of the XSUB requires a fully qualified prototype of function to correctly convert Perl values
	/// to their Swift counterparts. Arguments of the subroutine are copied.
	/// If a body throws then an error is propagated to Perl as a Perl exception (`die`).
	///
	/// - Parameter name: A fully qualified name of the subroutine under which it will be accessible in Perl.
	///   If not specified (or `nil` passed) then anonymous subroutine will be created.
	/// - Parameter file: A name of a source file subroutine was declared in. Used for debug purposes only.
	/// - Parameter body: The body of the XSUB.
	@discardableResult
	public convenience init${generic(p, tail)}(name: String? = nil, file: StaticString = #file, body: @escaping ${params} throws -> ${result(r)}) {
		self.init(name: name, file: file) {
			(stack: UnsafeXSubStack) in
%           if r == 0:
			try body(${args})
			stack.xsReturn(EmptyCollection())
%           elif r == 1:
			let result = try body(${args})
			stack.xsReturn(CollectionOfOne(result?._toUnsafeSvPointer(perl: stack.perl) ?? stack.perl.pointee.newSV(0)))
%           else:
			let result = try body(${args})
			let svResult: ContiguousArray<UnsafeSvPointer> = [ ${", ".join(map(lambda n: "result." + str(n) + "?._toUnsafeSvPointer(perl: stack.perl) ?? stack.perl.pointee.newSV(0)", range(0, r)))} ]
			stack.xsReturn(svResult)
%           end
		}
	}

%       end
%     end
%   end
% end
}

extension PerlSub {
	/// Creates a new Perl XSUB.
	///
	/// This is the last resort variant of subroutine construction. A body of the subroutine will receive all
	/// subroutine's arguments as an array of `PerlScalar` values and should return collection of `PerlScalar`s as
	/// its result. All examinations of concrete values' types should be performed manually.
	/// Arguments of the subroutine are not copied. Any modification of them will be visible outside the call.
	///
	/// - Parameter name: A fully qualified name of the subroutine under which it will be accessible in Perl.
	///   If not specified (or `nil` passed) then anonymous subroutine will be created.
	/// - Parameter file: A name of a source file subroutine was declared in. Used for debug purposes only.
	/// - Parameter body: The body of the XSUB.
	@discardableResult
	public convenience init(name: String? = nil, file: StaticString = #file, body: @escaping (Args) throws -> [PerlScalarConvertible?]) {
		self.init(name: name, file: file) {
			(stack: UnsafeXSubStack) in
			let result = try body(Args(stack.args, perl: stack.perl))
			stack.xsReturn(result.map { $0?._toUnsafeSvPointer(perl: stack.perl) ?? stack.perl.pointee.newSV(0) })
		}
	}
}

extension PerlNamedClass {
% for tail in ("fixed", "array", "hash"):
%   for p in paramsRange(tail):
%     for r in range(0, 3):
%       for params in paramsVariants(p, tail, True):

	/// Creates a new method in the Perl class specified in `perlClassName` attribute.
	///
	/// A body of the method requires a fully qualified prototype of function to correctly convert Perl values
	/// to their Swift counterparts. The first argument should follow Perl OOP conventions and contain
	/// object `$self` in case of an instance method or string `$class` in case of a class.
	/// Arguments of the subroutine are copied.
	/// If a body throws then an error is propagated to Perl as a Perl exception (`die`).
	///
	/// - Parameter method: A name of the method under which it will be accessible in Perl.
	/// - Parameter file: A name of a source file subroutine was declared in. Used for debug purposes only.
	/// - Parameter body: The body of the XSUB.
	@discardableResult
	public static func createPerlMethod${generic(p, tail)}(_ method: String, file: StaticString = #file, body: @escaping ${params} throws -> ${result(r)}) -> PerlSub {
		return PerlSub(name: perlClassName + "::" + method, file: file, body: body)
	}

%       end
%     end
%   end
% end

	/// Creates a new method in the Perl class specified in `perlClassName` attribute.
	///
	/// This is the last resort variant of subroutine construction. A body of the subroutine will receive all
	/// subroutine arguments as an array of `PerlScalar` values and should return collection of `PerlScalar`s as
	/// its result. All examinations of concrete values types should be performed manually.
	/// Arguments of the subroutine are not copied. Any modification of them will be visible outside the call.
	///
	/// - Parameter name: A name of the method under which it will be accessible in Perl.
	/// - Parameter file: A name of a source file subroutine was declared in. Used for debug purposes only.
	/// - Parameter body: The body of the XSUB.
	@discardableResult
	public static func createPerlMethod(_ method: String, file: StaticString = #file, body: @escaping (PerlSub.Args) throws -> [PerlScalarConvertible?]) -> PerlSub {
		return PerlSub(name: perlClassName + "::" + method, file: file, body: body)
	}
}
